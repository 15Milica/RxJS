(()=>{"use strict";function n(n,t,e,r,o,i){n.appendChild(e),e.appendChild(r),e.appendChild(o),e.appendChild(i),t?(r.innerHTML=t.name,o.innerHTML="Club: ".concat(t.club," Wins: ").concat(t.wins," \n             Speed: ").concat(t.speed),i.src=t.car):(n.appendChild(e),e.appendChild(r),r.innerHTML="Player not found",o.innerHTML="",i.src="https://us.v-cdn.net/6022045/uploads/defaultavatar.png")}var t=function(n,e){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(n[e]=t[e])},t(n,e)};function e(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}function r(n,t){var e,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(c){return function(a){return function(c){if(e)throw new TypeError("Generator is already executing.");for(;i&&(i=0,c[0]&&(u=0)),u;)try{if(e=1,r&&(o=2&c[0]?r.return:c[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,c[1])).done)return o;switch(r=0,o&&(c=[2&c[0],o.value]),c[0]){case 0:case 1:o=c;break;case 4:return u.label++,{value:c[1],done:!1};case 5:u.label++,r=c[1],c=[0];continue;case 7:c=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==c[0]&&2!==c[0])){u=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){u.label=c[1];break}if(6===c[0]&&u.label<o[1]){u.label=o[1],o=c;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(c);break}o[2]&&u.ops.pop(),u.trys.pop();continue}c=t.call(n,u)}catch(n){c=[6,n],r=0}finally{e=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,a])}}}function o(n){var t="function"==typeof Symbol&&Symbol.iterator,e=t&&n[t],r=0;if(e)return e.call(n);if(n&&"number"==typeof n.length)return{next:function(){return n&&r>=n.length&&(n=void 0),{value:n&&n[r++],done:!n}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function i(n,t){var e="function"==typeof Symbol&&n[Symbol.iterator];if(!e)return n;var r,o,i=e.call(n),u=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(n){o={error:n}}finally{try{r&&!r.done&&(e=i.return)&&e.call(i)}finally{if(o)throw o.error}}return u}function u(n,t,e){if(e||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return n.concat(r||Array.prototype.slice.call(t))}function c(n){return this instanceof c?(this.v=n,this):new c(n)}Object.create,Object.create;var a=function(n){return n&&"number"==typeof n.length&&"function"!=typeof n};function s(n){return"function"==typeof n}function l(n){return s(null==n?void 0:n.then)}var f,d=((f=function(n){var t;t=this,Error.call(t),t.stack=(new Error).stack,this.message=n?n.length+" errors occurred during unsubscription:\n"+n.map((function(n,t){return t+1+") "+n.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=n}).prototype=Object.create(Error.prototype),f.prototype.constructor=f,f);function h(n,t){if(n){var e=n.indexOf(t);0<=e&&n.splice(e,1)}}var p=function(){function n(n){this.initialTeardown=n,this.closed=!1,this._parentage=null,this._finalizers=null}return n.prototype.unsubscribe=function(){var n,t,e,r,c;if(!this.closed){this.closed=!0;var a=this._parentage;if(a)if(this._parentage=null,Array.isArray(a))try{for(var l=o(a),f=l.next();!f.done;f=l.next())f.value.remove(this)}catch(t){n={error:t}}finally{try{f&&!f.done&&(t=l.return)&&t.call(l)}finally{if(n)throw n.error}}else a.remove(this);var h=this.initialTeardown;if(s(h))try{h()}catch(n){c=n instanceof d?n.errors:[n]}var p=this._finalizers;if(p){this._finalizers=null;try{for(var v=o(p),b=v.next();!b.done;b=v.next()){var m=b.value;try{y(m)}catch(n){c=null!=c?c:[],n instanceof d?c=u(u([],i(c)),i(n.errors)):c.push(n)}}}catch(n){e={error:n}}finally{try{b&&!b.done&&(r=v.return)&&r.call(v)}finally{if(e)throw e.error}}}if(c)throw new d(c)}},n.prototype.add=function(t){var e;if(t&&t!==this)if(this.closed)y(t);else{if(t instanceof n){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(e=this._finalizers)&&void 0!==e?e:[]).push(t)}},n.prototype._hasParent=function(n){var t=this._parentage;return t===n||Array.isArray(t)&&t.includes(n)},n.prototype._addParent=function(n){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(n),t):t?[t,n]:n},n.prototype._removeParent=function(n){var t=this._parentage;t===n?this._parentage=null:Array.isArray(t)&&h(t,n)},n.prototype.remove=function(t){var e=this._finalizers;e&&h(e,t),t instanceof n&&t._removeParent(this)},n.EMPTY=((t=new n).closed=!0,t),n;var t}();function v(n){return n instanceof p||n&&"closed"in n&&s(n.remove)&&s(n.add)&&s(n.unsubscribe)}function y(n){s(n)?n():n.unsubscribe()}p.EMPTY;var b={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},m={setTimeout:function(n,t){for(var e=[],r=2;r<arguments.length;r++)e[r-2]=arguments[r];var o=m.delegate;return(null==o?void 0:o.setTimeout)?o.setTimeout.apply(o,u([n,t],i(e))):setTimeout.apply(void 0,u([n,t],i(e)))},clearTimeout:function(n){var t=m.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(n)},delegate:void 0};function w(n){m.setTimeout((function(){var t=b.onUnhandledError;if(!t)throw n;t(n)}))}function g(){}var x=_("C",void 0,void 0);function _(n,t,e){return{kind:n,value:t,error:e}}var E=null,S=function(n){function t(t){var e=n.call(this)||this;return e.isStopped=!1,t?(e.destination=t,v(t)&&t.add(e)):e.destination=k,e}return e(t,n),t.create=function(n,t,e){return new C(n,t,e)},t.prototype.next=function(n){this.isStopped?P(function(n){return _("N",n,void 0)}(n),this):this._next(n)},t.prototype.error=function(n){this.isStopped?P(_("E",void 0,n),this):(this.isStopped=!0,this._error(n))},t.prototype.complete=function(){this.isStopped?P(x,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,n.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(n){this.destination.next(n)},t.prototype._error=function(n){try{this.destination.error(n)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(p),T=Function.prototype.bind;function I(n,t){return T.call(n,t)}var A=function(){function n(n){this.partialObserver=n}return n.prototype.next=function(n){var t=this.partialObserver;if(t.next)try{t.next(n)}catch(n){O(n)}},n.prototype.error=function(n){var t=this.partialObserver;if(t.error)try{t.error(n)}catch(n){O(n)}else O(n)},n.prototype.complete=function(){var n=this.partialObserver;if(n.complete)try{n.complete()}catch(n){O(n)}},n}(),C=function(n){function t(t,e,r){var o,i,u=n.call(this)||this;return s(t)||!t?o={next:null!=t?t:void 0,error:null!=e?e:void 0,complete:null!=r?r:void 0}:u&&b.useDeprecatedNextContext?((i=Object.create(t)).unsubscribe=function(){return u.unsubscribe()},o={next:t.next&&I(t.next,i),error:t.error&&I(t.error,i),complete:t.complete&&I(t.complete,i)}):o=t,u.destination=new A(o),u}return e(t,n),t}(S);function O(n){var t;b.useDeprecatedSynchronousErrorHandling?(t=n,b.useDeprecatedSynchronousErrorHandling&&E&&(E.errorThrown=!0,E.error=t)):w(n)}function P(n,t){var e=b.onStoppedNotification;e&&m.setTimeout((function(){return e(n,t)}))}var k={closed:!0,next:g,error:function(n){throw n},complete:g},D="function"==typeof Symbol&&Symbol.observable||"@@observable";function L(n){return n}var j=function(){function n(n){n&&(this._subscribe=n)}return n.prototype.lift=function(t){var e=new n;return e.source=this,e.operator=t,e},n.prototype.subscribe=function(n,t,e){var r,o=this,i=(r=n)&&r instanceof S||function(n){return n&&s(n.next)&&s(n.error)&&s(n.complete)}(r)&&v(r)?n:new C(n,t,e);return function(n){if(b.useDeprecatedSynchronousErrorHandling){var t=!E;if(t&&(E={errorThrown:!1,error:null}),n(),t){var e=E,r=e.errorThrown,o=e.error;if(E=null,r)throw o}}else n()}((function(){var n=o,t=n.operator,e=n.source;i.add(t?t.call(i,e):e?o._subscribe(i):o._trySubscribe(i))})),i},n.prototype._trySubscribe=function(n){try{return this._subscribe(n)}catch(t){n.error(t)}},n.prototype.forEach=function(n,t){var e=this;return new(t=M(t))((function(t,r){var o=new C({next:function(t){try{n(t)}catch(n){r(n),o.unsubscribe()}},error:r,complete:t});e.subscribe(o)}))},n.prototype._subscribe=function(n){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(n)},n.prototype[D]=function(){return this},n.prototype.pipe=function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return(0===(e=n).length?L:1===e.length?e[0]:function(n){return e.reduce((function(n,t){return t(n)}),n)})(this);var e},n.prototype.toPromise=function(n){var t=this;return new(n=M(n))((function(n,e){var r;t.subscribe((function(n){return r=n}),(function(n){return e(n)}),(function(){return n(r)}))}))},n.create=function(t){return new n(t)},n}();function M(n){var t;return null!==(t=null!=n?n:b.Promise)&&void 0!==t?t:Promise}function N(n){return s(n[D])}function H(n){return Symbol.asyncIterator&&s(null==n?void 0:n[Symbol.asyncIterator])}function z(n){return new TypeError("You provided "+(null!==n&&"object"==typeof n?"an invalid object":"'"+n+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var U="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function W(n){return s(null==n?void 0:n[U])}function R(n){return function(n,t,e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=e.apply(n,t||[]),i=[];return r={},u("next"),u("throw"),u("return"),r[Symbol.asyncIterator]=function(){return this},r;function u(n){o[n]&&(r[n]=function(t){return new Promise((function(e,r){i.push([n,t,e,r])>1||a(n,t)}))})}function a(n,t){try{(e=o[n](t)).value instanceof c?Promise.resolve(e.value.v).then(s,l):f(i[0][2],e)}catch(n){f(i[0][3],n)}var e}function s(n){a("next",n)}function l(n){a("throw",n)}function f(n,t){n(t),i.shift(),i.length&&a(i[0][0],i[0][1])}}(this,arguments,(function(){var t,e,o;return r(this,(function(r){switch(r.label){case 0:t=n.getReader(),r.label=1;case 1:r.trys.push([1,,9,10]),r.label=2;case 2:return[4,c(t.read())];case 3:return e=r.sent(),o=e.value,e.done?[4,c(void 0)]:[3,5];case 4:return[2,r.sent()];case 5:return[4,c(o)];case 6:return[4,r.sent()];case 7:return r.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function Y(n){return s(null==n?void 0:n.getReader)}function q(n){if(n instanceof j)return n;if(null!=n){if(N(n))return i=n,new j((function(n){var t=i[D]();if(s(t.subscribe))return t.subscribe(n);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(a(n))return r=n,new j((function(n){for(var t=0;t<r.length&&!n.closed;t++)n.next(r[t]);n.complete()}));if(l(n))return e=n,new j((function(n){e.then((function(t){n.closed||(n.next(t),n.complete())}),(function(t){return n.error(t)})).then(null,w)}));if(H(n))return F(n);if(W(n))return t=n,new j((function(n){var e,r;try{for(var i=o(t),u=i.next();!u.done;u=i.next()){var c=u.value;if(n.next(c),n.closed)return}}catch(n){e={error:n}}finally{try{u&&!u.done&&(r=i.return)&&r.call(i)}finally{if(e)throw e.error}}n.complete()}));if(Y(n))return F(R(n))}var t,e,r,i;throw z(n)}function F(n){return new j((function(t){(function(n,t){var e,i,u,c,a,s,l,f;return a=this,s=void 0,f=function(){var a,s;return r(this,(function(r){switch(r.label){case 0:r.trys.push([0,5,6,11]),e=function(n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,e=n[Symbol.asyncIterator];return e?e.call(n):(n=o(n),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(e){t[e]=n[e]&&function(t){return new Promise((function(r,o){!function(n,t,e,r){Promise.resolve(r).then((function(t){n({value:t,done:e})}),t)}(r,o,(t=n[e](t)).done,t.value)}))}}}(n),r.label=1;case 1:return[4,e.next()];case 2:if((i=r.sent()).done)return[3,4];if(a=i.value,t.next(a),t.closed)return[2];r.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return s=r.sent(),u={error:s},[3,11];case 6:return r.trys.push([6,,9,10]),i&&!i.done&&(c=e.return)?[4,c.call(e)]:[3,8];case 7:r.sent(),r.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(n,t){function e(n){try{o(f.next(n))}catch(n){t(n)}}function r(n){try{o(f.throw(n))}catch(n){t(n)}}function o(t){var o;t.done?n(t.value):(o=t.value,o instanceof l?o:new l((function(n){n(o)}))).then(e,r)}o((f=f.apply(a,s||[])).next())}))})(n,t).catch((function(n){return t.error(n)}))}))}function G(n){return function(t){if(function(n){return s(null==n?void 0:n.lift)}(t))return t.lift((function(t){try{return n(t,this)}catch(n){this.error(n)}}));throw new TypeError("Unable to lift unknown Observable type")}}function B(n,t,e,r,o){return new V(n,t,e,r,o)}var V=function(n){function t(t,e,r,o,i,u){var c=n.call(this,t)||this;return c.onFinalize=i,c.shouldUnsubscribe=u,c._next=e?function(n){try{e(n)}catch(n){t.error(n)}}:n.prototype._next,c._error=o?function(n){try{o(n)}catch(n){t.error(n)}finally{this.unsubscribe()}}:n.prototype._error,c._complete=r?function(){try{r()}catch(n){t.error(n)}finally{this.unsubscribe()}}:n.prototype._complete,c}return e(t,n),t.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var e=this.closed;n.prototype.unsubscribe.call(this),!e&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},t}(S);function J(n,t){return G((function(e,r){var o=0;e.subscribe(B(r,(function(e){r.next(n.call(t,e,o++))})))}))}function K(n,t,e,r,o){void 0===r&&(r=0),void 0===o&&(o=!1);var i=t.schedule((function(){e(),o?n.add(this.schedule(null,r)):this.unsubscribe()}),r);if(n.add(i),!o)return i}function Q(n,t,e){return void 0===e&&(e=1/0),s(t)?Q((function(e,r){return J((function(n,o){return t(e,n,r,o)}))(q(n(e,r)))}),e):("number"==typeof t&&(e=t),G((function(t,r){return function(n,t,e,r,o,i,u,c){var a=[],s=0,l=0,f=!1,d=function(){!f||a.length||s||t.complete()},h=function(n){return s<r?p(n):a.push(n)},p=function(n){s++;var o=!1;q(e(n,l++)).subscribe(B(t,(function(n){t.next(n)}),(function(){o=!0}),void 0,(function(){if(o)try{s--;for(;a.length&&s<r;)n=void 0,n=a.shift(),p(n);d()}catch(n){t.error(n)}var n})))};return n.subscribe(B(t,h,(function(){f=!0,d()}))),function(){}}(t,r,n,e)})))}var X=Array.isArray;function Z(n){return J((function(t){return function(n,t){return X(t)?n.apply(void 0,u([],i(t))):n(t)}(n,t)}))}var $=["addListener","removeListener"],nn=["addEventListener","removeEventListener"],tn=["on","off"];function en(n,t,e,r){if(s(e)&&(r=e,e=void 0),r)return en(n,t,e).pipe(Z(r));var o=i(function(n){return s(n.addEventListener)&&s(n.removeEventListener)}(n)?nn.map((function(r){return function(o){return n[r](t,o,e)}})):function(n){return s(n.addListener)&&s(n.removeListener)}(n)?$.map(rn(n,t)):function(n){return s(n.on)&&s(n.off)}(n)?tn.map(rn(n,t)):[],2),u=o[0],c=o[1];if(!u&&a(n))return Q((function(n){return en(n,t,e)}))(q(n));if(!u)throw new TypeError("Invalid event target");return new j((function(n){var t=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return n.next(1<t.length?t:t[0])};return u(t),function(){return c(t)}}))}function rn(n,t){return function(e){return function(r){return n[e](t,r)}}}var on=function(n){function t(t,e){return n.call(this)||this}return e(t,n),t.prototype.schedule=function(n,t){return void 0===t&&(t=0),this},t}(p),un={setInterval:function(n,t){for(var e=[],r=2;r<arguments.length;r++)e[r-2]=arguments[r];var o=un.delegate;return(null==o?void 0:o.setInterval)?o.setInterval.apply(o,u([n,t],i(e))):setInterval.apply(void 0,u([n,t],i(e)))},clearInterval:function(n){var t=un.delegate;return((null==t?void 0:t.clearInterval)||clearInterval)(n)},delegate:void 0},cn=function(n){function t(t,e){var r=n.call(this,t,e)||this;return r.scheduler=t,r.work=e,r.pending=!1,r}return e(t,n),t.prototype.schedule=function(n,t){var e;if(void 0===t&&(t=0),this.closed)return this;this.state=n;var r=this.id,o=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(o,r,t)),this.pending=!0,this.delay=t,this.id=null!==(e=this.id)&&void 0!==e?e:this.requestAsyncId(o,this.id,t),this},t.prototype.requestAsyncId=function(n,t,e){return void 0===e&&(e=0),un.setInterval(n.flush.bind(n,this),e)},t.prototype.recycleAsyncId=function(n,t,e){if(void 0===e&&(e=0),null!=e&&this.delay===e&&!1===this.pending)return t;null!=t&&un.clearInterval(t)},t.prototype.execute=function(n,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var e=this._execute(n,t);if(e)return e;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},t.prototype._execute=function(n,t){var e,r=!1;try{this.work(n)}catch(n){r=!0,e=n||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),e},t.prototype.unsubscribe=function(){if(!this.closed){var t=this.id,e=this.scheduler,r=e.actions;this.work=this.state=this.scheduler=null,this.pending=!1,h(r,this),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null,n.prototype.unsubscribe.call(this)}},t}(on),an={now:function(){return(an.delegate||Date).now()},delegate:void 0},sn=function(){function n(t,e){void 0===e&&(e=n.now),this.schedulerActionCtor=t,this.now=e}return n.prototype.schedule=function(n,t,e){return void 0===t&&(t=0),new this.schedulerActionCtor(this,n).schedule(e,t)},n.now=an.now,n}(),ln=new(function(n){function t(t,e){void 0===e&&(e=sn.now);var r=n.call(this,t,e)||this;return r.actions=[],r._active=!1,r}return e(t,n),t.prototype.flush=function(n){var t=this.actions;if(this._active)t.push(n);else{var e;this._active=!0;do{if(e=n.execute(n.state,n.delay))break}while(n=t.shift());if(this._active=!1,e){for(;n=t.shift();)n.unsubscribe();throw e}}},t}(sn))(cn),fn=ln;function dn(n,t){return void 0===t&&(t=0),G((function(e,r){e.subscribe(B(r,(function(e){return K(r,n,(function(){return r.next(e)}),t)}),(function(){return K(r,n,(function(){return r.complete()}),t)}),(function(e){return K(r,n,(function(){return r.error(e)}),t)})))}))}function hn(n,t){return void 0===t&&(t=0),G((function(e,r){r.add(n.schedule((function(){return e.subscribe(r)}),t))}))}function pn(n,t){if(!n)throw new Error("Iterable cannot be null");return new j((function(e){K(e,t,(function(){var r=n[Symbol.asyncIterator]();K(e,t,(function(){r.next().then((function(n){n.done?e.complete():e.next(n.value)}))}),0,!0)}))}))}function vn(n,t){return t?function(n,t){if(null!=n){if(N(n))return function(n,t){return q(n).pipe(hn(t),dn(t))}(n,t);if(a(n))return function(n,t){return new j((function(e){var r=0;return t.schedule((function(){r===n.length?e.complete():(e.next(n[r++]),e.closed||this.schedule())}))}))}(n,t);if(l(n))return function(n,t){return q(n).pipe(hn(t),dn(t))}(n,t);if(H(n))return pn(n,t);if(W(n))return function(n,t){return new j((function(e){var r;return K(e,t,(function(){r=n[U](),K(e,t,(function(){var n,t,o;try{t=(n=r.next()).value,o=n.done}catch(n){return void e.error(n)}o?e.complete():e.next(t)}),0,!0)})),function(){return s(null==r?void 0:r.return)&&r.return()}}))}(n,t);if(Y(n))return function(n,t){return pn(R(n),t)}(n,t)}throw z(n)}(n,t):q(n)}var yn=Array.isArray,bn=Object.getPrototypeOf,mn=Object.prototype,wn=Object.keys;function gn(n){return n&&s(n.schedule)}function xn(n){return n[n.length-1]}function _n(n){return gn(xn(n))?n.pop():void 0}function En(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];var e=_n(n),r=function(n){return s(xn(n))?n.pop():void 0}(n),o=function(n){if(1===n.length){var t=n[0];if(yn(t))return{args:t,keys:null};if((r=t)&&"object"==typeof r&&bn(r)===mn){var e=wn(t);return{args:e.map((function(n){return t[n]})),keys:e}}}var r;return{args:n,keys:null}}(n),i=o.args,u=o.keys;if(0===i.length)return vn([],e);var c=new j(function(n,t,e){return void 0===e&&(e=L),function(r){Sn(t,(function(){for(var o=n.length,i=new Array(o),u=o,c=o,a=function(o){Sn(t,(function(){var a=vn(n[o],t),s=!1;a.subscribe(B(r,(function(n){i[o]=n,s||(s=!0,c--),c||r.next(e(i.slice()))}),(function(){--u||r.complete()})))}),r)},s=0;s<o;s++)a(s)}),r)}}(i,e,u?function(n){return function(n,t){return n.reduce((function(n,e,r){return n[e]=t[r],n}),{})}(u,n)}:L));return r?c.pipe(Z(r)):c}function Sn(n,t,e){n?K(e,n,t):t()}var Tn="http://localhost:3000";var In=new j((function(n){return n.complete()}));function An(n){return n<=0?function(){return In}:G((function(t,e){var r=0;t.subscribe(B(e,(function(t){++r<=n&&(e.next(t),n<=r&&e.complete())})))}))}function Cn(n,t){return t?function(e){return function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return(void 0===(e=1)&&(e=1/0),Q(L,e))(vn(n,_n(n)));var e}(t.pipe(An(1),G((function(n,t){n.subscribe(B(t,g))}))),e.pipe(Cn(n)))}:Q((function(t,e){return q(n(t,e)).pipe(An(1),function(n){return J((function(){return n}))}(t))}))}var On=function(){function n(n,t){this.opponents=[],this.myTeam=t,this.opponentsObs=n}return n.prototype.playGames=function(n){var t,e,r=this;vn(n).pipe((t=function(n){return function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return vn(n,_n(n))}(n).pipe(function(n,t){void 0===t&&(t=ln);var e=function(n,t,e){void 0===n&&(n=0),void 0===e&&(e=fn);var r=-1;return null!=t&&(gn(t)?e=t:r=t),new j((function(t){var o,i=(o=n)instanceof Date&&!isNaN(o)?+n-e.now():n;i<0&&(i=0);var u=0;return e.schedule((function(){t.closed||(t.next(u++),0<=r?this.schedule(void 0,r):t.complete())}),i)}))}(1e3,t);return Cn((function(){return e}))}())},s(e)?Q(t,e,1):Q(t,1))).subscribe((function(n){return r.determineWinner(r.myTeam.name,r.myTeam.getTeamCoef(),n)}))},n.prototype.startCompetition=function(){var n=this;this.opponentsObs.subscribe((function(t){n.playGames(t)}))},n.prototype.determineWinner=function(n,t,e){var r,o,i;t>=e.coefficient?(r=Math.round(5*Math.random()),o=Math.round(4*Math.random())):(r=Math.round(4*Math.random()),o=Math.round(5*Math.random())),i=r>o?"WIN":r<o?"LOST":"DRAW",function(n,t,e,r,o){var i=document.querySelector(".resultsDiv"),u=document.createElement("label");switch(i.appendChild(u),o){case"WIN":u.style.color="green";break;case"LOST":u.style.color="red";break;case"DRAW":u.style.color="yellow";break;default:u.style.color="white"}u.innerHTML="Racing ".concat(n," vs ").concat(t,", ").concat(o,": (").concat(e,":").concat(r,")")}(n,e.name,r,o,i)},n}(),Pn=function(){function n(n){this.drivers=n,this.name="BestDrivers"}return n.prototype.getTeamCoef=function(){var n=0;return this.drivers.forEach((function(t){n+=2*t.wins+t.speed*t.time})),n/this.drivers.length},n}();function kn(n,t,e){return en(n,"input").pipe((500,void 0===i&&(i=ln),G((function(n,t){var e=null,r=null,o=null,u=function(){if(e){e.unsubscribe(),e=null;var n=r;r=null,t.next(n)}};function c(){var n=o+500,r=i.now();if(r<n)return e=this.schedule(void 0,n-r),void t.add(e);u()}n.subscribe(B(t,(function(n){r=n,o=i.now(),e||(e=i.schedule(c,500),t.add(e))}),(function(){u(),t.complete()}),void 0,(function(){r=e=null})))}))),J((function(n){return n.target.value})),(o=function(n){return n.length>=3},G((function(n,t){var e=0;n.subscribe(B(t,(function(n){return o.call(undefined,n,e++)&&t.next(n)})))}))),(r=function(n){return function(n,t,e){return vn(fetch("".concat(Tn,"/").concat(e,"/?name=").concat(n)).then((function(n){if(n.ok)return n.json();throw new Error("Player not found")})).catch((function(n){return t.innerHTML="Player not found"})))}(n,t,e)},G((function(n,t){var e=null,o=!1,i=function(){return o&&!e&&t.complete()};n.subscribe(B(t,(function(n){null==e||e.unsubscribe();0;q(r(n)).subscribe(e=B(t,(function(n){return t.next(n)}),(function(){e=null,i()})))}),(function(){o=!0,i()})))}))),J((function(n){return n[0]})));var r,o,i}var Dn=[],Ln=document.createElement("div"),jn=[],Mn=[],Nn=[],Hn=[],zn=[];!function(n,t,e,r,o,i,u){for(var c=0;c<3;++c)n[c]=document.createElement("input"),t[c]=document.createElement("div"),t[c].className="driverDetails",e[c]=document.createElement("label"),r[c]=document.createElement("label"),o[c]=document.createElement("img"),o[c].className="driverImg";var a=["driver1","driver2","driver3"];for(c=0;c<3;++c)u[c]=document.createElement("div"),u[c].className=a[c],i.appendChild(u[c])}(Dn,jn,Mn,Nn,Hn,Ln,zn),function(n,t,e){var r=document.createElement("div");r.className="teamDiv",n.appendChild(r),function(n,t){var e=document.createElement("div");e.className="inputsDiv",n.appendChild(e);var r=["Driver 1","Driver 2","Driver 3"];t.forEach((function(n,t){var o=document.createElement("div");o.className="inputDiv",e.appendChild(o);var i=document.createElement("h3");i.innerHTML=r[t],o.appendChild(i),o.appendChild(n)}))}(r,e),t.className="teamViewDiv",r.appendChild(t)}(document.body,Ln,Dn),function(t,e,r,o,i,u){var c=kn(t[0],e[0],"driver1");c.subscribe((function(t){return n(e[0],t,r[0],o[0],i[0],u[0])}));var a=kn(t[1],e[1],"driver2");a.subscribe((function(t){return n(e[1],t,r[1],o[1],i[1],u[1])}));var s=kn(t[2],e[2],"driver3");s.subscribe((function(t){return n(e[2],t,r[2],o[2],i[2],u[2])})),En([c,a,s]).subscribe((function(n){var t=n[0],e=n[1],r=n[2];if(t&&e&&r){var o=new Pn([t,e,r]);new On(vn(fetch("".concat(Tn,"/teams")).then((function(n){if(n.ok)return n.json();throw new Error("Team not found")})).catch((function(n){return console.log("error")}))),o).startCompetition()}else console.log("wrong input")}))}(Dn,zn,jn,Mn,Nn,Hn);var Un=document.createElement("div");Un.classList.add("resultsDiv"),document.body.appendChild(Un)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEtBaEJDRixHQUN0Q25FLGtCQUNoQixNQUVJb0UsUUFBUUMsSUFBSSxjQUVwQixHQUNKLENJckNBQyxDQUFZM0IsR0FBYUssR0FBY0gsR0FBZUMsR0FBa0JDLEdBQW1CaGIsSUFDM0YsSUFBSXdjLEdBQWExRCxTQUFTRyxjQUFjLE9BQ3hDdUQsR0FBV0MsVUFBVXRWLElBQUksY0FDekIyUixTQUFTaFgsS0FBSzdCLFlBQVl1YyxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcnhqcy8uL3NyYy9kcmF3L2RyYXdmdW5jdGlvbi50cyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5tanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzQXJyYXlMaWtlLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc1Byb21pc2UuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3IuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2NyZWF0ZUVycm9yQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2FyclJlbW92ZS5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci90aW1lb3V0UHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL3JlcG9ydFVuaGFuZGxlZEVycm9yLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9ub29wLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvTm90aWZpY2F0aW9uRmFjdG9yaWVzLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9lcnJvckNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9TdWJzY3JpYmVyLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc3ltYm9sL29ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lkZW50aXR5LmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvcGlwZS5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNJbnRlcm9wT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNBc3luY0l0ZXJhYmxlLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC90aHJvd1Vub2JzZXJ2YWJsZUVycm9yLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc3ltYm9sL2l0ZXJhdG9yLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0l0ZXJhYmxlLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc1JlYWRhYmxlU3RyZWFtTGlrZS5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvaW5uZXJGcm9tLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9saWZ0LmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL09wZXJhdG9yU3Vic2NyaWJlci5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9tYXAuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2V4ZWN1dGVTY2hlZHVsZS5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9tZXJnZU1hcC5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9tZXJnZUludGVybmFscy5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvbWFwT25lT3JNYW55QXJncy5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvZnJvbUV2ZW50LmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL0FjdGlvbi5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci9pbnRlcnZhbFByb3ZpZGVyLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL0FzeW5jQWN0aW9uLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL2RhdGVUaW1lc3RhbXBQcm92aWRlci5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL1NjaGVkdWxlci5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci9hc3luYy5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci9Bc3luY1NjaGVkdWxlci5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9vYnNlcnZlT24uanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc3Vic2NyaWJlT24uanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVBc3luY0l0ZXJhYmxlLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9mcm9tLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlZC5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZU9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVBcnJheS5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZVByb21pc2UuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVJdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZS5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvYXJnc0FyZ0FycmF5T3JPYmplY3QuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzU2NoZWR1bGVyLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9hcmdzLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9jb21iaW5lTGF0ZXN0LmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9jcmVhdGVPYmplY3QuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL3NyYy9lbnZpcm9ubWVudHMudHMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2VtcHR5LmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3Rha2UuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZGVsYXlXaGVuLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9jb25jYXQuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VBbGwuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvY29uY2F0QWxsLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2lnbm9yZUVsZW1lbnRzLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21hcFRvLmpzIiwid2VicGFjazovL3J4anMvLi9zcmMvbW9kZWxzL3JhY2luZy50cyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9jb25jYXRNYXAuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL29mLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2RlbGF5LmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS90aW1lci5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNEYXRlLmpzIiwid2VicGFjazovL3J4anMvLi9zcmMvbW9kZWxzL3RlYW0udHMiLCJ3ZWJwYWNrOi8vcnhqcy8uL3NyYy9jb250cm9sbGVycy9vYnNlcnZhYmxlcy50cyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9kZWJvdW5jZVRpbWUuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZmlsdGVyLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3N3aXRjaE1hcC5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vc3JjL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBkcmF3Qm9keUNvbnRhaW5lcihob3N0LCB0ZWFtVmlld0NvbnRhaW5lciwgaW5wdXRzKSB7XG4gICAgdmFyIHRlYW1Db250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRlYW1Db250YWluZXIuY2xhc3NOYW1lID0gXCJ0ZWFtRGl2XCI7XG4gICAgaG9zdC5hcHBlbmRDaGlsZCh0ZWFtQ29udGFpbmVyKTtcbiAgICBkcmF3SW5wdXRzKHRlYW1Db250YWluZXIsIGlucHV0cyk7XG4gICAgdGVhbVZpZXdDb250YWluZXIuY2xhc3NOYW1lID0gXCJ0ZWFtVmlld0RpdlwiO1xuICAgIHRlYW1Db250YWluZXIuYXBwZW5kQ2hpbGQodGVhbVZpZXdDb250YWluZXIpO1xufVxuZnVuY3Rpb24gZHJhd0lucHV0cyhob3N0LCBpbnB1dHMpIHtcbiAgICB2YXIgaW5wdXRzQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBpbnB1dHNDb250YWluZXIuY2xhc3NOYW1lID0gXCJpbnB1dHNEaXZcIjtcbiAgICBob3N0LmFwcGVuZENoaWxkKGlucHV0c0NvbnRhaW5lcik7XG4gICAgdmFyIGxhYmVsVmFsdWVzID0gW1xuICAgICAgICBcIkRyaXZlciAxXCIsXG4gICAgICAgIFwiRHJpdmVyIDJcIixcbiAgICAgICAgXCJEcml2ZXIgM1wiXG4gICAgXTtcbiAgICBpbnB1dHMuZm9yRWFjaChmdW5jdGlvbiAoaW5wdXRGaWVsZCwgaW5kKSB7XG4gICAgICAgIHZhciBpbnB1dERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGlucHV0RGl2LmNsYXNzTmFtZSA9IFwiaW5wdXREaXZcIjtcbiAgICAgICAgaW5wdXRzQ29udGFpbmVyLmFwcGVuZENoaWxkKGlucHV0RGl2KTtcbiAgICAgICAgdmFyIGxhYmVsYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoM1wiKTtcbiAgICAgICAgbGFiZWxhLmlubmVySFRNTCA9IGxhYmVsVmFsdWVzW2luZF07XG4gICAgICAgIGlucHV0RGl2LmFwcGVuZENoaWxkKGxhYmVsYSk7XG4gICAgICAgIGlucHV0RGl2LmFwcGVuZENoaWxkKGlucHV0RmllbGQpO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRzKGlucHV0RmllbGRzLCBkcml2ZXJEZXRhaWxzLCBkcml2ZXJOYW1lTGFiZWxzLCBkcml2ZXJTdGF0c0xhYmVscywgZHJpdmVySW1nQ2FyLCB0ZWFtVmlld0NvbnRhaW5lciwgcG9zaXRpb25EaXZzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyArK2kpIHtcbiAgICAgICAgaW5wdXRGaWVsZHNbaV0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgIGRyaXZlckRldGFpbHNbaV0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBkcml2ZXJEZXRhaWxzW2ldLmNsYXNzTmFtZSA9IFwiZHJpdmVyRGV0YWlsc1wiO1xuICAgICAgICBkcml2ZXJOYW1lTGFiZWxzW2ldID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICAgICAgICBkcml2ZXJTdGF0c0xhYmVsc1tpXSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcbiAgICAgICAgZHJpdmVySW1nQ2FyW2ldID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcbiAgICAgICAgZHJpdmVySW1nQ2FyW2ldLmNsYXNzTmFtZSA9IFwiZHJpdmVySW1nXCI7XG4gICAgfVxuICAgIHZhciBjbGFzc05hbWVzID0gW1xuICAgICAgICBcImRyaXZlcjFcIixcbiAgICAgICAgXCJkcml2ZXIyXCIsXG4gICAgICAgIFwiZHJpdmVyM1wiXG4gICAgXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDM7ICsraSkge1xuICAgICAgICBwb3NpdGlvbkRpdnNbaV0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBwb3NpdGlvbkRpdnNbaV0uY2xhc3NOYW1lID0gY2xhc3NOYW1lc1tpXTtcbiAgICAgICAgdGVhbVZpZXdDb250YWluZXIuYXBwZW5kQ2hpbGQocG9zaXRpb25EaXZzW2ldKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZHJhd0RyaXZlcihob3N0LCBkcml2ZXIsIGRyaXZlckRldGFpbHNEaXYsIGRyaXZlck5hbWVMYmwsIGRyaXZlclN0YXRzTGJsLCBkcml2ZXJJbWdDYXIpIHtcbiAgICBob3N0LmFwcGVuZENoaWxkKGRyaXZlckRldGFpbHNEaXYpO1xuICAgIGRyaXZlckRldGFpbHNEaXYuYXBwZW5kQ2hpbGQoZHJpdmVyTmFtZUxibCk7XG4gICAgZHJpdmVyRGV0YWlsc0Rpdi5hcHBlbmRDaGlsZChkcml2ZXJTdGF0c0xibCk7XG4gICAgZHJpdmVyRGV0YWlsc0Rpdi5hcHBlbmRDaGlsZChkcml2ZXJJbWdDYXIpO1xuICAgIGlmIChkcml2ZXIpIHtcbiAgICAgICAgZHJpdmVyTmFtZUxibC5pbm5lckhUTUwgPSBkcml2ZXIubmFtZTtcbiAgICAgICAgZHJpdmVyU3RhdHNMYmwuaW5uZXJIVE1MID0gXCJDbHViOiBcIi5jb25jYXQoZHJpdmVyLmNsdWIsIFwiIFdpbnM6IFwiKS5jb25jYXQoZHJpdmVyLndpbnMsIFwiIFxcbiAgICAgICAgICAgICBTcGVlZDogXCIpLmNvbmNhdChkcml2ZXIuc3BlZWQpO1xuICAgICAgICBkcml2ZXJJbWdDYXIuc3JjID0gZHJpdmVyLmNhcjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGhvc3QuYXBwZW5kQ2hpbGQoZHJpdmVyRGV0YWlsc0Rpdik7XG4gICAgICAgIGRyaXZlckRldGFpbHNEaXYuYXBwZW5kQ2hpbGQoZHJpdmVyTmFtZUxibCk7XG4gICAgICAgIGRyaXZlck5hbWVMYmwuaW5uZXJIVE1MID0gXCJQbGF5ZXIgbm90IGZvdW5kXCI7XG4gICAgICAgIGRyaXZlclN0YXRzTGJsLmlubmVySFRNTCA9IFwiXCI7XG4gICAgICAgIGRyaXZlckltZ0Nhci5zcmMgPSBcImh0dHBzOi8vdXMudi1jZG4ubmV0LzYwMjIwNDUvdXBsb2Fkcy9kZWZhdWx0YXZhdGFyLnBuZ1wiO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBkcmF3UmVzdWx0cyhteVRlYW1OYW1lLCBvcHBvbmVudE5hbWUsIG15U2NvcmUsIG9wcG9uZW50U2NvcmUsIHJlc3VsdCkge1xuICAgIHZhciBob3N0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5yZXN1bHRzRGl2XCIpO1xuICAgIHZhciByZXN1bHRMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcbiAgICBob3N0LmFwcGVuZENoaWxkKHJlc3VsdExhYmVsKTtcbiAgICBzd2l0Y2ggKHJlc3VsdCkge1xuICAgICAgICBjYXNlIFwiV0lOXCI6XG4gICAgICAgICAgICByZXN1bHRMYWJlbC5zdHlsZS5jb2xvciA9IFwiZ3JlZW5cIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiTE9TVFwiOlxuICAgICAgICAgICAgcmVzdWx0TGFiZWwuc3R5bGUuY29sb3IgPSBcInJlZFwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJEUkFXXCI6XG4gICAgICAgICAgICByZXN1bHRMYWJlbC5zdHlsZS5jb2xvciA9IFwieWVsbG93XCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJlc3VsdExhYmVsLnN0eWxlLmNvbG9yID0gXCJ3aGl0ZVwiO1xuICAgIH1cbiAgICByZXN1bHRMYWJlbC5pbm5lckhUTUwgPSBcIlJhY2luZyBcIi5jb25jYXQobXlUZWFtTmFtZSwgXCIgdnMgXCIpLmNvbmNhdChvcHBvbmVudE5hbWUsIFwiLCBcIikuY29uY2F0KHJlc3VsdCwgXCI6IChcIikuY29uY2F0KG15U2NvcmUsIFwiOlwiKS5jb25jYXQob3Bwb25lbnRTY29yZSwgXCIpXCIpO1xufVxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG5cblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1Jcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cblxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XG4gIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XG4gIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59XG5cbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcbiAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcbiAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0O1xuICB9XG4gIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcbiAgdmFyIHQgPSB7fTtcbiAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXG4gICAgICB0W3BdID0gc1twXTtcbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICB9XG4gIHJldHVybiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2VzRGVjb3JhdGUoY3RvciwgZGVzY3JpcHRvckluLCBkZWNvcmF0b3JzLCBjb250ZXh0SW4sIGluaXRpYWxpemVycywgZXh0cmFJbml0aWFsaXplcnMpIHtcbiAgZnVuY3Rpb24gYWNjZXB0KGYpIHsgaWYgKGYgIT09IHZvaWQgMCAmJiB0eXBlb2YgZiAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRnVuY3Rpb24gZXhwZWN0ZWRcIik7IHJldHVybiBmOyB9XG4gIHZhciBraW5kID0gY29udGV4dEluLmtpbmQsIGtleSA9IGtpbmQgPT09IFwiZ2V0dGVyXCIgPyBcImdldFwiIDoga2luZCA9PT0gXCJzZXR0ZXJcIiA/IFwic2V0XCIgOiBcInZhbHVlXCI7XG4gIHZhciB0YXJnZXQgPSAhZGVzY3JpcHRvckluICYmIGN0b3IgPyBjb250ZXh0SW5bXCJzdGF0aWNcIl0gPyBjdG9yIDogY3Rvci5wcm90b3R5cGUgOiBudWxsO1xuICB2YXIgZGVzY3JpcHRvciA9IGRlc2NyaXB0b3JJbiB8fCAodGFyZ2V0ID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGNvbnRleHRJbi5uYW1lKSA6IHt9KTtcbiAgdmFyIF8sIGRvbmUgPSBmYWxzZTtcbiAgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBjb250ZXh0ID0ge307XG4gICAgICBmb3IgKHZhciBwIGluIGNvbnRleHRJbikgY29udGV4dFtwXSA9IHAgPT09IFwiYWNjZXNzXCIgPyB7fSA6IGNvbnRleHRJbltwXTtcbiAgICAgIGZvciAodmFyIHAgaW4gY29udGV4dEluLmFjY2VzcykgY29udGV4dC5hY2Nlc3NbcF0gPSBjb250ZXh0SW4uYWNjZXNzW3BdO1xuICAgICAgY29udGV4dC5hZGRJbml0aWFsaXplciA9IGZ1bmN0aW9uIChmKSB7IGlmIChkb25lKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGFkZCBpbml0aWFsaXplcnMgYWZ0ZXIgZGVjb3JhdGlvbiBoYXMgY29tcGxldGVkXCIpOyBleHRyYUluaXRpYWxpemVycy5wdXNoKGFjY2VwdChmIHx8IG51bGwpKTsgfTtcbiAgICAgIHZhciByZXN1bHQgPSAoMCwgZGVjb3JhdG9yc1tpXSkoa2luZCA9PT0gXCJhY2Nlc3NvclwiID8geyBnZXQ6IGRlc2NyaXB0b3IuZ2V0LCBzZXQ6IGRlc2NyaXB0b3Iuc2V0IH0gOiBkZXNjcmlwdG9yW2tleV0sIGNvbnRleHQpO1xuICAgICAgaWYgKGtpbmQgPT09IFwiYWNjZXNzb3JcIikge1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHZvaWQgMCkgY29udGludWU7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCB8fCB0eXBlb2YgcmVzdWx0ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IGV4cGVjdGVkXCIpO1xuICAgICAgICAgIGlmIChfID0gYWNjZXB0KHJlc3VsdC5nZXQpKSBkZXNjcmlwdG9yLmdldCA9IF87XG4gICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LnNldCkpIGRlc2NyaXB0b3Iuc2V0ID0gXztcbiAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuaW5pdCkpIGluaXRpYWxpemVycy51bnNoaWZ0KF8pO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoXyA9IGFjY2VwdChyZXN1bHQpKSB7XG4gICAgICAgICAgaWYgKGtpbmQgPT09IFwiZmllbGRcIikgaW5pdGlhbGl6ZXJzLnVuc2hpZnQoXyk7XG4gICAgICAgICAgZWxzZSBkZXNjcmlwdG9yW2tleV0gPSBfO1xuICAgICAgfVxuICB9XG4gIGlmICh0YXJnZXQpIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGNvbnRleHRJbi5uYW1lLCBkZXNjcmlwdG9yKTtcbiAgZG9uZSA9IHRydWU7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19ydW5Jbml0aWFsaXplcnModGhpc0FyZywgaW5pdGlhbGl6ZXJzLCB2YWx1ZSkge1xuICB2YXIgdXNlVmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbml0aWFsaXplcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlID0gdXNlVmFsdWUgPyBpbml0aWFsaXplcnNbaV0uY2FsbCh0aGlzQXJnLCB2YWx1ZSkgOiBpbml0aWFsaXplcnNbaV0uY2FsbCh0aGlzQXJnKTtcbiAgfVxuICByZXR1cm4gdXNlVmFsdWUgPyB2YWx1ZSA6IHZvaWQgMDtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3Byb3BLZXkoeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09IFwic3ltYm9sXCIgPyB4IDogXCJcIi5jb25jYXQoeCk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19zZXRGdW5jdGlvbk5hbWUoZiwgbmFtZSwgcHJlZml4KSB7XG4gIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJzeW1ib2xcIikgbmFtZSA9IG5hbWUuZGVzY3JpcHRpb24gPyBcIltcIi5jb25jYXQobmFtZS5kZXNjcmlwdGlvbiwgXCJdXCIpIDogXCJcIjtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmLCBcIm5hbWVcIiwgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiBwcmVmaXggPyBcIlwiLmNvbmNhdChwcmVmaXgsIFwiIFwiLCBuYW1lKSA6IG5hbWUgfSk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xuICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgIHdoaWxlIChnICYmIChnID0gMCwgb3BbMF0gJiYgKF8gPSAwKSksIF8pIHRyeSB7XG4gICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgfVxufVxuXG5leHBvcnQgdmFyIF9fY3JlYXRlQmluZGluZyA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgb1trMl0gPSBtW2tdO1xufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgbykge1xuICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XG4gIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XG4gIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xuICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XG4gICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcbiAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XG4gICAgICB9XG4gIH07XG4gIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XG4gIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgaWYgKCFtKSByZXR1cm4gbztcbiAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gIHRyeSB7XG4gICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgfVxuICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgfVxuICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gIH1cbiAgcmV0dXJuIGFyO1xufVxuXG4vKiogQGRlcHJlY2F0ZWQgKi9cbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcbiAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXG4gICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XG4gIHJldHVybiBhcjtcbn1cblxuLyoqIEBkZXByZWNhdGVkICovXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XG4gIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xuICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXG4gICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcbiAgICAgICAgICByW2tdID0gYVtqXTtcbiAgcmV0dXJuIHI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5KHRvLCBmcm9tLCBwYWNrKSB7XG4gIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XG4gICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcbiAgICAgICAgICBhcltpXSA9IGZyb21baV07XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcbiAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xuICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xuICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xuICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XG4gIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxuICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XG4gIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxuICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XG4gIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cbiAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XG4gIHZhciBpLCBwO1xuICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xuICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBmYWxzZSB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XG4gIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG4gIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XG4gIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcbiAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxuICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xuICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxuICByZXR1cm4gY29va2VkO1xufTtcblxudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgb1tcImRlZmF1bHRcIl0gPSB2O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcbiAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XG4gIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRJbihzdGF0ZSwgcmVjZWl2ZXIpIHtcbiAgaWYgKHJlY2VpdmVyID09PSBudWxsIHx8ICh0eXBlb2YgcmVjZWl2ZXIgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHJlY2VpdmVyICE9PSBcImZ1bmN0aW9uXCIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHVzZSAnaW4nIG9wZXJhdG9yIG9uIG5vbi1vYmplY3RcIik7XG4gIHJldHVybiB0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyID09PSBzdGF0ZSA6IHN0YXRlLmhhcyhyZWNlaXZlcik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgX19leHRlbmRzLFxuICBfX2Fzc2lnbixcbiAgX19yZXN0LFxuICBfX2RlY29yYXRlLFxuICBfX3BhcmFtLFxuICBfX21ldGFkYXRhLFxuICBfX2F3YWl0ZXIsXG4gIF9fZ2VuZXJhdG9yLFxuICBfX2NyZWF0ZUJpbmRpbmcsXG4gIF9fZXhwb3J0U3RhcixcbiAgX192YWx1ZXMsXG4gIF9fcmVhZCxcbiAgX19zcHJlYWQsXG4gIF9fc3ByZWFkQXJyYXlzLFxuICBfX3NwcmVhZEFycmF5LFxuICBfX2F3YWl0LFxuICBfX2FzeW5jR2VuZXJhdG9yLFxuICBfX2FzeW5jRGVsZWdhdG9yLFxuICBfX2FzeW5jVmFsdWVzLFxuICBfX21ha2VUZW1wbGF0ZU9iamVjdCxcbiAgX19pbXBvcnRTdGFyLFxuICBfX2ltcG9ydERlZmF1bHQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRHZXQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRTZXQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRJbixcbn07XG4iLCJleHBvcnQgdmFyIGlzQXJyYXlMaWtlID0gKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4ICYmIHR5cGVvZiB4Lmxlbmd0aCA9PT0gJ251bWJlcicgJiYgdHlwZW9mIHggIT09ICdmdW5jdGlvbic7IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNBcnJheUxpa2UuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNGdW5jdGlvbi5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSBcIi4vaXNGdW5jdGlvblwiO1xuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvbWlzZSh2YWx1ZSkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2YWx1ZS50aGVuKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzUHJvbWlzZS5qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVFcnJvckNsYXNzIH0gZnJvbSAnLi9jcmVhdGVFcnJvckNsYXNzJztcbmV4cG9ydCB2YXIgVW5zdWJzY3JpcHRpb25FcnJvciA9IGNyZWF0ZUVycm9yQ2xhc3MoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHJldHVybiBmdW5jdGlvbiBVbnN1YnNjcmlwdGlvbkVycm9ySW1wbChlcnJvcnMpIHtcbiAgICAgICAgX3N1cGVyKHRoaXMpO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBlcnJvcnNcbiAgICAgICAgICAgID8gZXJyb3JzLmxlbmd0aCArIFwiIGVycm9ycyBvY2N1cnJlZCBkdXJpbmcgdW5zdWJzY3JpcHRpb246XFxuXCIgKyBlcnJvcnMubWFwKGZ1bmN0aW9uIChlcnIsIGkpIHsgcmV0dXJuIGkgKyAxICsgXCIpIFwiICsgZXJyLnRvU3RyaW5nKCk7IH0pLmpvaW4oJ1xcbiAgJylcbiAgICAgICAgICAgIDogJyc7XG4gICAgICAgIHRoaXMubmFtZSA9ICdVbnN1YnNjcmlwdGlvbkVycm9yJztcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XG4gICAgfTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VW5zdWJzY3JpcHRpb25FcnJvci5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gY3JlYXRlRXJyb3JDbGFzcyhjcmVhdGVJbXBsKSB7XG4gICAgdmFyIF9zdXBlciA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgICBFcnJvci5jYWxsKGluc3RhbmNlKTtcbiAgICAgICAgaW5zdGFuY2Uuc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICB9O1xuICAgIHZhciBjdG9yRnVuYyA9IGNyZWF0ZUltcGwoX3N1cGVyKTtcbiAgICBjdG9yRnVuYy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG4gICAgY3RvckZ1bmMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvckZ1bmM7XG4gICAgcmV0dXJuIGN0b3JGdW5jO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlRXJyb3JDbGFzcy5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gYXJyUmVtb3ZlKGFyciwgaXRlbSkge1xuICAgIGlmIChhcnIpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYXJyLmluZGV4T2YoaXRlbSk7XG4gICAgICAgIDAgPD0gaW5kZXggJiYgYXJyLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJyUmVtb3ZlLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCwgX19zcHJlYWRBcnJheSwgX192YWx1ZXMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBVbnN1YnNjcmlwdGlvbkVycm9yIH0gZnJvbSAnLi91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3InO1xuaW1wb3J0IHsgYXJyUmVtb3ZlIH0gZnJvbSAnLi91dGlsL2FyclJlbW92ZSc7XG52YXIgU3Vic2NyaXB0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdWJzY3JpcHRpb24oaW5pdGlhbFRlYXJkb3duKSB7XG4gICAgICAgIHRoaXMuaW5pdGlhbFRlYXJkb3duID0gaW5pdGlhbFRlYXJkb3duO1xuICAgICAgICB0aGlzLmNsb3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xuICAgICAgICB0aGlzLl9maW5hbGl6ZXJzID0gbnVsbDtcbiAgICB9XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVfMSwgX2EsIGVfMiwgX2I7XG4gICAgICAgIHZhciBlcnJvcnM7XG4gICAgICAgIGlmICghdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICAgICAgaWYgKF9wYXJlbnRhZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfcGFyZW50YWdlXzEgPSBfX3ZhbHVlcyhfcGFyZW50YWdlKSwgX3BhcmVudGFnZV8xXzEgPSBfcGFyZW50YWdlXzEubmV4dCgpOyAhX3BhcmVudGFnZV8xXzEuZG9uZTsgX3BhcmVudGFnZV8xXzEgPSBfcGFyZW50YWdlXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudF8xID0gX3BhcmVudGFnZV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50XzEucmVtb3ZlKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3BhcmVudGFnZV8xXzEgJiYgIV9wYXJlbnRhZ2VfMV8xLmRvbmUgJiYgKF9hID0gX3BhcmVudGFnZV8xLnJldHVybikpIF9hLmNhbGwoX3BhcmVudGFnZV8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3BhcmVudGFnZS5yZW1vdmUodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGluaXRpYWxGaW5hbGl6ZXIgPSB0aGlzLmluaXRpYWxUZWFyZG93bjtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGluaXRpYWxGaW5hbGl6ZXIpKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbEZpbmFsaXplcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBlIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvciA/IGUuZXJyb3JzIDogW2VdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBfZmluYWxpemVycyA9IHRoaXMuX2ZpbmFsaXplcnM7XG4gICAgICAgICAgICBpZiAoX2ZpbmFsaXplcnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9maW5hbGl6ZXJzID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZmluYWxpemVyc18xID0gX192YWx1ZXMoX2ZpbmFsaXplcnMpLCBfZmluYWxpemVyc18xXzEgPSBfZmluYWxpemVyc18xLm5leHQoKTsgIV9maW5hbGl6ZXJzXzFfMS5kb25lOyBfZmluYWxpemVyc18xXzEgPSBfZmluYWxpemVyc18xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbmFsaXplciA9IF9maW5hbGl6ZXJzXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhlY0ZpbmFsaXplcihmaW5hbGl6ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IGVycm9ycyAhPT0gbnVsbCAmJiBlcnJvcnMgIT09IHZvaWQgMCA/IGVycm9ycyA6IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBVbnN1YnNjcmlwdGlvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IF9fc3ByZWFkQXJyYXkoX19zcHJlYWRBcnJheShbXSwgX19yZWFkKGVycm9ycykpLCBfX3JlYWQoZXJyLmVycm9ycykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVfMl8xKSB7IGVfMiA9IHsgZXJyb3I6IGVfMl8xIH07IH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZmluYWxpemVyc18xXzEgJiYgIV9maW5hbGl6ZXJzXzFfMS5kb25lICYmIChfYiA9IF9maW5hbGl6ZXJzXzEucmV0dXJuKSkgX2IuY2FsbChfZmluYWxpemVyc18xKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yOyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVycm9ycykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbnN1YnNjcmlwdGlvbkVycm9yKGVycm9ycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHRlYXJkb3duKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHRlYXJkb3duICYmIHRlYXJkb3duICE9PSB0aGlzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBleGVjRmluYWxpemVyKHRlYXJkb3duKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0ZWFyZG93biBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGVhcmRvd24uY2xvc2VkIHx8IHRlYXJkb3duLl9oYXNQYXJlbnQodGhpcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0ZWFyZG93bi5fYWRkUGFyZW50KHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAodGhpcy5fZmluYWxpemVycyA9IChfYSA9IHRoaXMuX2ZpbmFsaXplcnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFtdKS5wdXNoKHRlYXJkb3duKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5faGFzUGFyZW50ID0gZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgcmV0dXJuIF9wYXJlbnRhZ2UgPT09IHBhcmVudCB8fCAoQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSAmJiBfcGFyZW50YWdlLmluY2x1ZGVzKHBhcmVudCkpO1xuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5fYWRkUGFyZW50ID0gZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgdGhpcy5fcGFyZW50YWdlID0gQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSA/IChfcGFyZW50YWdlLnB1c2gocGFyZW50KSwgX3BhcmVudGFnZSkgOiBfcGFyZW50YWdlID8gW19wYXJlbnRhZ2UsIHBhcmVudF0gOiBwYXJlbnQ7XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9yZW1vdmVQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICBpZiAoX3BhcmVudGFnZSA9PT0gcGFyZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkpIHtcbiAgICAgICAgICAgIGFyclJlbW92ZShfcGFyZW50YWdlLCBwYXJlbnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICh0ZWFyZG93bikge1xuICAgICAgICB2YXIgX2ZpbmFsaXplcnMgPSB0aGlzLl9maW5hbGl6ZXJzO1xuICAgICAgICBfZmluYWxpemVycyAmJiBhcnJSZW1vdmUoX2ZpbmFsaXplcnMsIHRlYXJkb3duKTtcbiAgICAgICAgaWYgKHRlYXJkb3duIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0ZWFyZG93bi5fcmVtb3ZlUGFyZW50KHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24uRU1QVFkgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZW1wdHkgPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIGVtcHR5LmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBlbXB0eTtcbiAgICB9KSgpO1xuICAgIHJldHVybiBTdWJzY3JpcHRpb247XG59KCkpO1xuZXhwb3J0IHsgU3Vic2NyaXB0aW9uIH07XG5leHBvcnQgdmFyIEVNUFRZX1NVQlNDUklQVElPTiA9IFN1YnNjcmlwdGlvbi5FTVBUWTtcbmV4cG9ydCBmdW5jdGlvbiBpc1N1YnNjcmlwdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24gfHxcbiAgICAgICAgKHZhbHVlICYmICdjbG9zZWQnIGluIHZhbHVlICYmIGlzRnVuY3Rpb24odmFsdWUucmVtb3ZlKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLmFkZCkgJiYgaXNGdW5jdGlvbih2YWx1ZS51bnN1YnNjcmliZSkpKTtcbn1cbmZ1bmN0aW9uIGV4ZWNGaW5hbGl6ZXIoZmluYWxpemVyKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oZmluYWxpemVyKSkge1xuICAgICAgICBmaW5hbGl6ZXIoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGZpbmFsaXplci51bnN1YnNjcmliZSgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YnNjcmlwdGlvbi5qcy5tYXAiLCJleHBvcnQgdmFyIGNvbmZpZyA9IHtcbiAgICBvblVuaGFuZGxlZEVycm9yOiBudWxsLFxuICAgIG9uU3RvcHBlZE5vdGlmaWNhdGlvbjogbnVsbCxcbiAgICBQcm9taXNlOiB1bmRlZmluZWQsXG4gICAgdXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZzogZmFsc2UsXG4gICAgdXNlRGVwcmVjYXRlZE5leHRDb250ZXh0OiBmYWxzZSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWcuanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5leHBvcnQgdmFyIHRpbWVvdXRQcm92aWRlciA9IHtcbiAgICBzZXRUaW1lb3V0OiBmdW5jdGlvbiAoaGFuZGxlciwgdGltZW91dCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDI7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVsZWdhdGUgPSB0aW1lb3V0UHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuc2V0VGltZW91dCkge1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlLnNldFRpbWVvdXQuYXBwbHkoZGVsZWdhdGUsIF9fc3ByZWFkQXJyYXkoW2hhbmRsZXIsIHRpbWVvdXRdLCBfX3JlYWQoYXJncykpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2V0VGltZW91dC5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW2hhbmRsZXIsIHRpbWVvdXRdLCBfX3JlYWQoYXJncykpKTtcbiAgICB9LFxuICAgIGNsZWFyVGltZW91dDogZnVuY3Rpb24gKGhhbmRsZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSB0aW1lb3V0UHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIHJldHVybiAoKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5jbGVhclRpbWVvdXQpIHx8IGNsZWFyVGltZW91dCkoaGFuZGxlKTtcbiAgICB9LFxuICAgIGRlbGVnYXRlOiB1bmRlZmluZWQsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZW91dFByb3ZpZGVyLmpzLm1hcCIsImltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgeyB0aW1lb3V0UHJvdmlkZXIgfSBmcm9tICcuLi9zY2hlZHVsZXIvdGltZW91dFByb3ZpZGVyJztcbmV4cG9ydCBmdW5jdGlvbiByZXBvcnRVbmhhbmRsZWRFcnJvcihlcnIpIHtcbiAgICB0aW1lb3V0UHJvdmlkZXIuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvblVuaGFuZGxlZEVycm9yID0gY29uZmlnLm9uVW5oYW5kbGVkRXJyb3I7XG4gICAgICAgIGlmIChvblVuaGFuZGxlZEVycm9yKSB7XG4gICAgICAgICAgICBvblVuaGFuZGxlZEVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcG9ydFVuaGFuZGxlZEVycm9yLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBub29wKCkgeyB9XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub29wLmpzLm1hcCIsImV4cG9ydCB2YXIgQ09NUExFVEVfTk9USUZJQ0FUSU9OID0gKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignQycsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTsgfSkoKTtcbmV4cG9ydCBmdW5jdGlvbiBlcnJvck5vdGlmaWNhdGlvbihlcnJvcikge1xuICAgIHJldHVybiBjcmVhdGVOb3RpZmljYXRpb24oJ0UnLCB1bmRlZmluZWQsIGVycm9yKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBuZXh0Tm90aWZpY2F0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignTicsIHZhbHVlLCB1bmRlZmluZWQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU5vdGlmaWNhdGlvbihraW5kLCB2YWx1ZSwgZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBraW5kOiBraW5kLFxuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIGVycm9yOiBlcnJvcixcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Tm90aWZpY2F0aW9uRmFjdG9yaWVzLmpzLm1hcCIsImltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZyc7XG52YXIgY29udGV4dCA9IG51bGw7XG5leHBvcnQgZnVuY3Rpb24gZXJyb3JDb250ZXh0KGNiKSB7XG4gICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgIHZhciBpc1Jvb3QgPSAhY29udGV4dDtcbiAgICAgICAgaWYgKGlzUm9vdCkge1xuICAgICAgICAgICAgY29udGV4dCA9IHsgZXJyb3JUaHJvd246IGZhbHNlLCBlcnJvcjogbnVsbCB9O1xuICAgICAgICB9XG4gICAgICAgIGNiKCk7XG4gICAgICAgIGlmIChpc1Jvb3QpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IGNvbnRleHQsIGVycm9yVGhyb3duID0gX2EuZXJyb3JUaHJvd24sIGVycm9yID0gX2EuZXJyb3I7XG4gICAgICAgICAgICBjb250ZXh0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChlcnJvclRocm93bikge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjYigpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBjYXB0dXJlRXJyb3IoZXJyKSB7XG4gICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nICYmIGNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dC5lcnJvclRocm93biA9IHRydWU7XG4gICAgICAgIGNvbnRleHQuZXJyb3IgPSBlcnI7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JDb250ZXh0LmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IGlzU3Vic2NyaXB0aW9uLCBTdWJzY3JpcHRpb24gfSBmcm9tICcuL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyByZXBvcnRVbmhhbmRsZWRFcnJvciB9IGZyb20gJy4vdXRpbC9yZXBvcnRVbmhhbmRsZWRFcnJvcic7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi91dGlsL25vb3AnO1xuaW1wb3J0IHsgbmV4dE5vdGlmaWNhdGlvbiwgZXJyb3JOb3RpZmljYXRpb24sIENPTVBMRVRFX05PVElGSUNBVElPTiB9IGZyb20gJy4vTm90aWZpY2F0aW9uRmFjdG9yaWVzJztcbmltcG9ydCB7IHRpbWVvdXRQcm92aWRlciB9IGZyb20gJy4vc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlcic7XG5pbXBvcnQgeyBjYXB0dXJlRXJyb3IgfSBmcm9tICcuL3V0aWwvZXJyb3JDb250ZXh0JztcbnZhciBTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJzY3JpYmVyKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmlzU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICBpZiAoZGVzdGluYXRpb24pIHtcbiAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgICAgICAgICBpZiAoaXNTdWJzY3JpcHRpb24oZGVzdGluYXRpb24pKSB7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24uYWRkKF90aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gRU1QVFlfT0JTRVJWRVI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTdWJzY3JpYmVyLmNyZWF0ZSA9IGZ1bmN0aW9uIChuZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTYWZlU3Vic2NyaWJlcihuZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24obmV4dE5vdGlmaWNhdGlvbih2YWx1ZSksIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fbmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24oZXJyb3JOb3RpZmljYXRpb24oZXJyKSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKENPTVBMRVRFX05PVElGSUNBVElPTiwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFN1YnNjcmliZXI7XG59KFN1YnNjcmlwdGlvbikpO1xuZXhwb3J0IHsgU3Vic2NyaWJlciB9O1xudmFyIF9iaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQ7XG5mdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIF9iaW5kLmNhbGwoZm4sIHRoaXNBcmcpO1xufVxudmFyIENvbnN1bWVyT2JzZXJ2ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbnN1bWVyT2JzZXJ2ZXIocGFydGlhbE9ic2VydmVyKSB7XG4gICAgICAgIHRoaXMucGFydGlhbE9ic2VydmVyID0gcGFydGlhbE9ic2VydmVyO1xuICAgIH1cbiAgICBDb25zdW1lck9ic2VydmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXIgPSB0aGlzLnBhcnRpYWxPYnNlcnZlcjtcbiAgICAgICAgaWYgKHBhcnRpYWxPYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29uc3VtZXJPYnNlcnZlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXIgPSB0aGlzLnBhcnRpYWxPYnNlcnZlcjtcbiAgICAgICAgaWYgKHBhcnRpYWxPYnNlcnZlci5lcnJvcikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbnN1bWVyT2JzZXJ2ZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcGFydGlhbE9ic2VydmVyID0gdGhpcy5wYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgICAgIGlmIChwYXJ0aWFsT2JzZXJ2ZXIuY29tcGxldGUpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBDb25zdW1lck9ic2VydmVyO1xufSgpKTtcbnZhciBTYWZlU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFNhZmVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNhZmVTdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgdmFyIHBhcnRpYWxPYnNlcnZlcjtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ob2JzZXJ2ZXJPck5leHQpIHx8ICFvYnNlcnZlck9yTmV4dCkge1xuICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyID0ge1xuICAgICAgICAgICAgICAgIG5leHQ6IChvYnNlcnZlck9yTmV4dCAhPT0gbnVsbCAmJiBvYnNlcnZlck9yTmV4dCAhPT0gdm9pZCAwID8gb2JzZXJ2ZXJPck5leHQgOiB1bmRlZmluZWQpLFxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvciAhPT0gbnVsbCAmJiBlcnJvciAhPT0gdm9pZCAwID8gZXJyb3IgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IGNvbXBsZXRlICE9PSBudWxsICYmIGNvbXBsZXRlICE9PSB2b2lkIDAgPyBjb21wbGV0ZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgY29udGV4dF8xO1xuICAgICAgICAgICAgaWYgKF90aGlzICYmIGNvbmZpZy51c2VEZXByZWNhdGVkTmV4dENvbnRleHQpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0XzEgPSBPYmplY3QuY3JlYXRlKG9ic2VydmVyT3JOZXh0KTtcbiAgICAgICAgICAgICAgICBjb250ZXh0XzEudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy51bnN1YnNjcmliZSgpOyB9O1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dDogb2JzZXJ2ZXJPck5leHQubmV4dCAmJiBiaW5kKG9ic2VydmVyT3JOZXh0Lm5leHQsIGNvbnRleHRfMSksXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBvYnNlcnZlck9yTmV4dC5lcnJvciAmJiBiaW5kKG9ic2VydmVyT3JOZXh0LmVycm9yLCBjb250ZXh0XzEpLFxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogb2JzZXJ2ZXJPck5leHQuY29tcGxldGUgJiYgYmluZChvYnNlcnZlck9yTmV4dC5jb21wbGV0ZSwgY29udGV4dF8xKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyID0gb2JzZXJ2ZXJPck5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBuZXcgQ29uc3VtZXJPYnNlcnZlcihwYXJ0aWFsT2JzZXJ2ZXIpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBTYWZlU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgU2FmZVN1YnNjcmliZXIgfTtcbmZ1bmN0aW9uIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKSB7XG4gICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgIGNhcHR1cmVFcnJvcihlcnJvcik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXBvcnRVbmhhbmRsZWRFcnJvcihlcnJvcik7XG4gICAgfVxufVxuZnVuY3Rpb24gZGVmYXVsdEVycm9ySGFuZGxlcihlcnIpIHtcbiAgICB0aHJvdyBlcnI7XG59XG5mdW5jdGlvbiBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbiwgc3Vic2NyaWJlcikge1xuICAgIHZhciBvblN0b3BwZWROb3RpZmljYXRpb24gPSBjb25maWcub25TdG9wcGVkTm90aWZpY2F0aW9uO1xuICAgIG9uU3RvcHBlZE5vdGlmaWNhdGlvbiAmJiB0aW1lb3V0UHJvdmlkZXIuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBvblN0b3BwZWROb3RpZmljYXRpb24obm90aWZpY2F0aW9uLCBzdWJzY3JpYmVyKTsgfSk7XG59XG5leHBvcnQgdmFyIEVNUFRZX09CU0VSVkVSID0ge1xuICAgIGNsb3NlZDogdHJ1ZSxcbiAgICBuZXh0OiBub29wLFxuICAgIGVycm9yOiBkZWZhdWx0RXJyb3JIYW5kbGVyLFxuICAgIGNvbXBsZXRlOiBub29wLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YnNjcmliZXIuanMubWFwIiwiZXhwb3J0IHZhciBvYnNlcnZhYmxlID0gKGZ1bmN0aW9uICgpIHsgcmV0dXJuICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5vYnNlcnZhYmxlKSB8fCAnQEBvYnNlcnZhYmxlJzsgfSkoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmFibGUuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KHgpIHtcbiAgICByZXR1cm4geDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlkZW50aXR5LmpzLm1hcCIsImltcG9ydCB7IFNhZmVTdWJzY3JpYmVyLCBTdWJzY3JpYmVyIH0gZnJvbSAnLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IGlzU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4vc3ltYm9sL29ic2VydmFibGUnO1xuaW1wb3J0IHsgcGlwZUZyb21BcnJheSB9IGZyb20gJy4vdXRpbC9waXBlJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBlcnJvckNvbnRleHQgfSBmcm9tICcuL3V0aWwvZXJyb3JDb250ZXh0JztcbnZhciBPYnNlcnZhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZSkge1xuICAgICAgICBpZiAoc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICB0aGlzLl9zdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUubGlmdCA9IGZ1bmN0aW9uIChvcGVyYXRvcikge1xuICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKCk7XG4gICAgICAgIG9ic2VydmFibGUuc291cmNlID0gdGhpcztcbiAgICAgICAgb2JzZXJ2YWJsZS5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBzdWJzY3JpYmVyID0gaXNTdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0KSA/IG9ic2VydmVyT3JOZXh0IDogbmV3IFNhZmVTdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgICAgICBlcnJvckNvbnRleHQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMsIG9wZXJhdG9yID0gX2Eub3BlcmF0b3IsIHNvdXJjZSA9IF9hLnNvdXJjZTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKG9wZXJhdG9yXG4gICAgICAgICAgICAgICAgP1xuICAgICAgICAgICAgICAgICAgICBvcGVyYXRvci5jYWxsKHN1YnNjcmliZXIsIHNvdXJjZSlcbiAgICAgICAgICAgICAgICA6IHNvdXJjZVxuICAgICAgICAgICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc3Vic2NyaWJlKHN1YnNjcmliZXIpXG4gICAgICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl90cnlTdWJzY3JpYmUoc3Vic2NyaWJlcikpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZXI7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gKHNpbmspIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdWJzY3JpYmUoc2luayk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgc2luay5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKG5leHQsIHByb21pc2VDdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHByb21pc2VDdG9yID0gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpO1xuICAgICAgICByZXR1cm4gbmV3IHByb21pc2VDdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciBzdWJzY3JpYmVyID0gbmV3IFNhZmVTdWJzY3JpYmVyKHtcbiAgICAgICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvcjogcmVqZWN0LFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiByZXNvbHZlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBfdGhpcy5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIChfYSA9IHRoaXMuc291cmNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGVbU3ltYm9sX29ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvcGVyYXRpb25zID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBvcGVyYXRpb25zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBpcGVGcm9tQXJyYXkob3BlcmF0aW9ucykodGhpcyk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS50b1Byb21pc2UgPSBmdW5jdGlvbiAocHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcHJvbWlzZUN0b3IgPSBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcik7XG4gICAgICAgIHJldHVybiBuZXcgcHJvbWlzZUN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICAgICAgX3RoaXMuc3Vic2NyaWJlKGZ1bmN0aW9uICh4KSB7IHJldHVybiAodmFsdWUgPSB4KTsgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gcmVqZWN0KGVycik7IH0sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc29sdmUodmFsdWUpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLmNyZWF0ZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKHN1YnNjcmliZSk7XG4gICAgfTtcbiAgICByZXR1cm4gT2JzZXJ2YWJsZTtcbn0oKSk7XG5leHBvcnQgeyBPYnNlcnZhYmxlIH07XG5mdW5jdGlvbiBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcikge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gKF9hID0gcHJvbWlzZUN0b3IgIT09IG51bGwgJiYgcHJvbWlzZUN0b3IgIT09IHZvaWQgMCA/IHByb21pc2VDdG9yIDogY29uZmlnLlByb21pc2UpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFByb21pc2U7XG59XG5mdW5jdGlvbiBpc09ic2VydmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIGlzRnVuY3Rpb24odmFsdWUubmV4dCkgJiYgaXNGdW5jdGlvbih2YWx1ZS5lcnJvcikgJiYgaXNGdW5jdGlvbih2YWx1ZS5jb21wbGV0ZSk7XG59XG5mdW5jdGlvbiBpc1N1YnNjcmliZXIodmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlICYmIHZhbHVlIGluc3RhbmNlb2YgU3Vic2NyaWJlcikgfHwgKGlzT2JzZXJ2ZXIodmFsdWUpICYmIGlzU3Vic2NyaXB0aW9uKHZhbHVlKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PYnNlcnZhYmxlLmpzLm1hcCIsImltcG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi9pZGVudGl0eSc7XG5leHBvcnQgZnVuY3Rpb24gcGlwZSgpIHtcbiAgICB2YXIgZm5zID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgZm5zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBwaXBlRnJvbUFycmF5KGZucyk7XG59XG5leHBvcnQgZnVuY3Rpb24gcGlwZUZyb21BcnJheShmbnMpIHtcbiAgICBpZiAoZm5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gaWRlbnRpdHk7XG4gICAgfVxuICAgIGlmIChmbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBmbnNbMF07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiBwaXBlZChpbnB1dCkge1xuICAgICAgICByZXR1cm4gZm5zLnJlZHVjZShmdW5jdGlvbiAocHJldiwgZm4pIHsgcmV0dXJuIGZuKHByZXYpOyB9LCBpbnB1dCk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBpcGUuanMubWFwIiwiaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4uL3N5bWJvbC9vYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGlzSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihpbnB1dFtTeW1ib2xfb2JzZXJ2YWJsZV0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNJbnRlcm9wT2JzZXJ2YWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBpc0FzeW5jSXRlcmFibGUob2JqKSB7XG4gICAgcmV0dXJuIFN5bWJvbC5hc3luY0l0ZXJhdG9yICYmIGlzRnVuY3Rpb24ob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0FzeW5jSXRlcmFibGUuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yKGlucHV0KSB7XG4gICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoXCJZb3UgcHJvdmlkZWQgXCIgKyAoaW5wdXQgIT09IG51bGwgJiYgdHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JyA/ICdhbiBpbnZhbGlkIG9iamVjdCcgOiBcIidcIiArIGlucHV0ICsgXCInXCIpICsgXCIgd2hlcmUgYSBzdHJlYW0gd2FzIGV4cGVjdGVkLiBZb3UgY2FuIHByb3ZpZGUgYW4gT2JzZXJ2YWJsZSwgUHJvbWlzZSwgUmVhZGFibGVTdHJlYW0sIEFycmF5LCBBc3luY0l0ZXJhYmxlLCBvciBJdGVyYWJsZS5cIik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aHJvd1Vub2JzZXJ2YWJsZUVycm9yLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBnZXRTeW1ib2xJdGVyYXRvcigpIHtcbiAgICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJyB8fCAhU3ltYm9sLml0ZXJhdG9yKSB7XG4gICAgICAgIHJldHVybiAnQEBpdGVyYXRvcic7XG4gICAgfVxuICAgIHJldHVybiBTeW1ib2wuaXRlcmF0b3I7XG59XG5leHBvcnQgdmFyIGl0ZXJhdG9yID0gZ2V0U3ltYm9sSXRlcmF0b3IoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWl0ZXJhdG9yLmpzLm1hcCIsImltcG9ydCB7IGl0ZXJhdG9yIGFzIFN5bWJvbF9pdGVyYXRvciB9IGZyb20gJy4uL3N5bWJvbC9pdGVyYXRvcic7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBpc0l0ZXJhYmxlKGlucHV0KSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oaW5wdXQgPT09IG51bGwgfHwgaW5wdXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGlucHV0W1N5bWJvbF9pdGVyYXRvcl0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNJdGVyYWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBfX2FzeW5jR2VuZXJhdG9yLCBfX2F3YWl0LCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gcmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvcihyZWFkYWJsZVN0cmVhbSkge1xuICAgIHJldHVybiBfX2FzeW5jR2VuZXJhdG9yKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24gcmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvcl8xKCkge1xuICAgICAgICB2YXIgcmVhZGVyLCBfYSwgdmFsdWUsIGRvbmU7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlciA9IHJlYWRhYmxlU3RyZWFtLmdldFJlYWRlcigpO1xuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzEsICwgOSwgMTBdKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAyO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0cnVlKSByZXR1cm4gWzMsIDhdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIF9fYXdhaXQocmVhZGVyLnJlYWQoKSldO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgX2EgPSBfYi5zZW50KCksIHZhbHVlID0gX2EudmFsdWUsIGRvbmUgPSBfYS5kb25lO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWRvbmUpIHJldHVybiBbMywgNV07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgX19hd2FpdCh2b2lkIDApXTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiwgX2Iuc2VudCgpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbNCwgX19hd2FpdCh2YWx1ZSldO1xuICAgICAgICAgICAgICAgIGNhc2UgNjogcmV0dXJuIFs0LCBfYi5zZW50KCldO1xuICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMsIDJdO1xuICAgICAgICAgICAgICAgIGNhc2UgODogcmV0dXJuIFszLCAxMF07XG4gICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIucmVsZWFzZUxvY2soKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs3XTtcbiAgICAgICAgICAgICAgICBjYXNlIDEwOiByZXR1cm4gWzJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1JlYWRhYmxlU3RyZWFtTGlrZShvYmopIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihvYmogPT09IG51bGwgfHwgb2JqID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYmouZ2V0UmVhZGVyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzUmVhZGFibGVTdHJlYW1MaWtlLmpzLm1hcCIsImltcG9ydCB7IF9fYXN5bmNWYWx1ZXMsIF9fYXdhaXRlciwgX19nZW5lcmF0b3IsIF9fdmFsdWVzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0FycmF5TGlrZSB9IGZyb20gJy4uL3V0aWwvaXNBcnJheUxpa2UnO1xuaW1wb3J0IHsgaXNQcm9taXNlIH0gZnJvbSAnLi4vdXRpbC9pc1Byb21pc2UnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNJbnRlcm9wT2JzZXJ2YWJsZSB9IGZyb20gJy4uL3V0aWwvaXNJbnRlcm9wT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpc0FzeW5jSXRlcmFibGUgfSBmcm9tICcuLi91dGlsL2lzQXN5bmNJdGVyYWJsZSc7XG5pbXBvcnQgeyBjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvciB9IGZyb20gJy4uL3V0aWwvdGhyb3dVbm9ic2VydmFibGVFcnJvcic7XG5pbXBvcnQgeyBpc0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0l0ZXJhYmxlJztcbmltcG9ydCB7IGlzUmVhZGFibGVTdHJlYW1MaWtlLCByZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yIH0gZnJvbSAnLi4vdXRpbC9pc1JlYWRhYmxlU3RyZWFtTGlrZSc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IHJlcG9ydFVuaGFuZGxlZEVycm9yIH0gZnJvbSAnLi4vdXRpbC9yZXBvcnRVbmhhbmRsZWRFcnJvcic7XG5pbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi4vc3ltYm9sL29ic2VydmFibGUnO1xuZXhwb3J0IGZ1bmN0aW9uIGlubmVyRnJvbShpbnB1dCkge1xuICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIE9ic2VydmFibGUpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNJbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FycmF5TGlrZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNQcm9taXNlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21Qcm9taXNlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBc3luY0l0ZXJhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21Bc3luY0l0ZXJhYmxlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNJdGVyYWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tSXRlcmFibGUoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1JlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvcihpbnB1dCk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbUludGVyb3BPYnNlcnZhYmxlKG9iaikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgb2JzID0gb2JqW1N5bWJvbF9vYnNlcnZhYmxlXSgpO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihvYnMuc3Vic2NyaWJlKSkge1xuICAgICAgICAgICAgcmV0dXJuIG9icy5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJvdmlkZWQgb2JqZWN0IGRvZXMgbm90IGNvcnJlY3RseSBpbXBsZW1lbnQgU3ltYm9sLm9ic2VydmFibGUnKTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tQXJyYXlMaWtlKGFycmF5KSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoICYmICFzdWJzY3JpYmVyLmNsb3NlZDsgaSsrKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoYXJyYXlbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUHJvbWlzZShwcm9taXNlKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHByb21pc2VcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBzdWJzY3JpYmVyLmVycm9yKGVycik7IH0pXG4gICAgICAgICAgICAudGhlbihudWxsLCByZXBvcnRVbmhhbmRsZWRFcnJvcik7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbUl0ZXJhYmxlKGl0ZXJhYmxlKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgaXRlcmFibGVfMSA9IF9fdmFsdWVzKGl0ZXJhYmxlKSwgaXRlcmFibGVfMV8xID0gaXRlcmFibGVfMS5uZXh0KCk7ICFpdGVyYWJsZV8xXzEuZG9uZTsgaXRlcmFibGVfMV8xID0gaXRlcmFibGVfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBpdGVyYWJsZV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZXJhYmxlXzFfMSAmJiAhaXRlcmFibGVfMV8xLmRvbmUgJiYgKF9hID0gaXRlcmFibGVfMS5yZXR1cm4pKSBfYS5jYWxsKGl0ZXJhYmxlXzEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICB9XG4gICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tQXN5bmNJdGVyYWJsZShhc3luY0l0ZXJhYmxlKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHByb2Nlc3MoYXN5bmNJdGVyYWJsZSwgc3Vic2NyaWJlcikuY2F0Y2goZnVuY3Rpb24gKGVycikgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUmVhZGFibGVTdHJlYW1MaWtlKHJlYWRhYmxlU3RyZWFtKSB7XG4gICAgcmV0dXJuIGZyb21Bc3luY0l0ZXJhYmxlKHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IocmVhZGFibGVTdHJlYW0pKTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3MoYXN5bmNJdGVyYWJsZSwgc3Vic2NyaWJlcikge1xuICAgIHZhciBhc3luY0l0ZXJhYmxlXzEsIGFzeW5jSXRlcmFibGVfMV8xO1xuICAgIHZhciBlXzIsIF9hO1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHZhbHVlLCBlXzJfMTtcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFswLCA1LCA2LCAxMV0pO1xuICAgICAgICAgICAgICAgICAgICBhc3luY0l0ZXJhYmxlXzEgPSBfX2FzeW5jVmFsdWVzKGFzeW5jSXRlcmFibGUpO1xuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gWzQsIGFzeW5jSXRlcmFibGVfMS5uZXh0KCldO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoYXN5bmNJdGVyYWJsZV8xXzEgPSBfYi5zZW50KCksICFhc3luY0l0ZXJhYmxlXzFfMS5kb25lKSkgcmV0dXJuIFszLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBhc3luY0l0ZXJhYmxlXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzJdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMztcbiAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbMywgMV07XG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzMsIDExXTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIGVfMl8xID0gX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICBlXzIgPSB7IGVycm9yOiBlXzJfMSB9O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMsIDExXTtcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbNiwgLCA5LCAxMF0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIShhc3luY0l0ZXJhYmxlXzFfMSAmJiAhYXN5bmNJdGVyYWJsZV8xXzEuZG9uZSAmJiAoX2EgPSBhc3luY0l0ZXJhYmxlXzEucmV0dXJuKSkpIHJldHVybiBbMywgOF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgX2EuY2FsbChhc3luY0l0ZXJhYmxlXzEpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSA4O1xuICAgICAgICAgICAgICAgIGNhc2UgODogcmV0dXJuIFszLCAxMF07XG4gICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICBpZiAoZV8yKSB0aHJvdyBlXzIuZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbN107XG4gICAgICAgICAgICAgICAgY2FzZSAxMDogcmV0dXJuIFs3XTtcbiAgICAgICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5uZXJGcm9tLmpzLm1hcCIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGhhc0xpZnQoc291cmNlKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oc291cmNlID09PSBudWxsIHx8IHNvdXJjZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc291cmNlLmxpZnQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG9wZXJhdGUoaW5pdCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIGlmIChoYXNMaWZ0KHNvdXJjZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2UubGlmdChmdW5jdGlvbiAobGlmdGVkU291cmNlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluaXQobGlmdGVkU291cmNlLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5hYmxlIHRvIGxpZnQgdW5rbm93biBPYnNlcnZhYmxlIHR5cGUnKTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlmdC5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoZGVzdGluYXRpb24sIG9uTmV4dCwgb25Db21wbGV0ZSwgb25FcnJvciwgb25GaW5hbGl6ZSkge1xuICAgIHJldHVybiBuZXcgT3BlcmF0b3JTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvbk5leHQsIG9uQ29tcGxldGUsIG9uRXJyb3IsIG9uRmluYWxpemUpO1xufVxudmFyIE9wZXJhdG9yU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE9wZXJhdG9yU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBPcGVyYXRvclN1YnNjcmliZXIoZGVzdGluYXRpb24sIG9uTmV4dCwgb25Db21wbGV0ZSwgb25FcnJvciwgb25GaW5hbGl6ZSwgc2hvdWxkVW5zdWJzY3JpYmUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm9uRmluYWxpemUgPSBvbkZpbmFsaXplO1xuICAgICAgICBfdGhpcy5zaG91bGRVbnN1YnNjcmliZSA9IHNob3VsZFVuc3Vic2NyaWJlO1xuICAgICAgICBfdGhpcy5fbmV4dCA9IG9uTmV4dFxuICAgICAgICAgICAgPyBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvbk5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9uZXh0O1xuICAgICAgICBfdGhpcy5fZXJyb3IgPSBvbkVycm9yXG4gICAgICAgICAgICA/IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IF9zdXBlci5wcm90b3R5cGUuX2Vycm9yO1xuICAgICAgICBfdGhpcy5fY29tcGxldGUgPSBvbkNvbXBsZXRlXG4gICAgICAgICAgICA/IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvbkNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IF9zdXBlci5wcm90b3R5cGUuX2NvbXBsZXRlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9wZXJhdG9yU3Vic2NyaWJlci5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKCF0aGlzLnNob3VsZFVuc3Vic2NyaWJlIHx8IHRoaXMuc2hvdWxkVW5zdWJzY3JpYmUoKSkge1xuICAgICAgICAgICAgdmFyIGNsb3NlZF8xID0gdGhpcy5jbG9zZWQ7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAhY2xvc2VkXzEgJiYgKChfYSA9IHRoaXMub25GaW5hbGl6ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodGhpcykpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gT3BlcmF0b3JTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBPcGVyYXRvclN1YnNjcmliZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9wZXJhdG9yU3Vic2NyaWJlci5qcy5tYXAiLCJpbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBtYXAocHJvamVjdCwgdGhpc0FyZykge1xuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocHJvamVjdC5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpbmRleCsrKSk7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcC5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gZXhlY3V0ZVNjaGVkdWxlKHBhcmVudFN1YnNjcmlwdGlvbiwgc2NoZWR1bGVyLCB3b3JrLCBkZWxheSwgcmVwZWF0KSB7XG4gICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgaWYgKHJlcGVhdCA9PT0gdm9pZCAwKSB7IHJlcGVhdCA9IGZhbHNlOyB9XG4gICAgdmFyIHNjaGVkdWxlU3Vic2NyaXB0aW9uID0gc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd29yaygpO1xuICAgICAgICBpZiAocmVwZWF0KSB7XG4gICAgICAgICAgICBwYXJlbnRTdWJzY3JpcHRpb24uYWRkKHRoaXMuc2NoZWR1bGUobnVsbCwgZGVsYXkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH0sIGRlbGF5KTtcbiAgICBwYXJlbnRTdWJzY3JpcHRpb24uYWRkKHNjaGVkdWxlU3Vic2NyaXB0aW9uKTtcbiAgICBpZiAoIXJlcGVhdCkge1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVTdWJzY3JpcHRpb247XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhlY3V0ZVNjaGVkdWxlLmpzLm1hcCIsImltcG9ydCB7IG1hcCB9IGZyb20gJy4vbWFwJztcbmltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgbWVyZ2VJbnRlcm5hbHMgfSBmcm9tICcuL21lcmdlSW50ZXJuYWxzJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlTWFwKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yLCBjb25jdXJyZW50KSB7XG4gICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkgeyBjb25jdXJyZW50ID0gSW5maW5pdHk7IH1cbiAgICBpZiAoaXNGdW5jdGlvbihyZXN1bHRTZWxlY3RvcikpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlTWFwKGZ1bmN0aW9uIChhLCBpKSB7IHJldHVybiBtYXAoZnVuY3Rpb24gKGIsIGlpKSB7IHJldHVybiByZXN1bHRTZWxlY3RvcihhLCBiLCBpLCBpaSk7IH0pKGlubmVyRnJvbShwcm9qZWN0KGEsIGkpKSk7IH0sIGNvbmN1cnJlbnQpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgcmVzdWx0U2VsZWN0b3IgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbmN1cnJlbnQgPSByZXN1bHRTZWxlY3RvcjtcbiAgICB9XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikgeyByZXR1cm4gbWVyZ2VJbnRlcm5hbHMoc291cmNlLCBzdWJzY3JpYmVyLCBwcm9qZWN0LCBjb25jdXJyZW50KTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZU1hcC5qcy5tYXAiLCJpbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XG5pbXBvcnQgeyBleGVjdXRlU2NoZWR1bGUgfSBmcm9tICcuLi91dGlsL2V4ZWN1dGVTY2hlZHVsZSc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VJbnRlcm5hbHMoc291cmNlLCBzdWJzY3JpYmVyLCBwcm9qZWN0LCBjb25jdXJyZW50LCBvbkJlZm9yZU5leHQsIGV4cGFuZCwgaW5uZXJTdWJTY2hlZHVsZXIsIGFkZGl0aW9uYWxGaW5hbGl6ZXIpIHtcbiAgICB2YXIgYnVmZmVyID0gW107XG4gICAgdmFyIGFjdGl2ZSA9IDA7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgaXNDb21wbGV0ZSA9IGZhbHNlO1xuICAgIHZhciBjaGVja0NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNDb21wbGV0ZSAmJiAhYnVmZmVyLmxlbmd0aCAmJiAhYWN0aXZlKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciBvdXRlck5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIChhY3RpdmUgPCBjb25jdXJyZW50ID8gZG9Jbm5lclN1Yih2YWx1ZSkgOiBidWZmZXIucHVzaCh2YWx1ZSkpOyB9O1xuICAgIHZhciBkb0lubmVyU3ViID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGV4cGFuZCAmJiBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICBhY3RpdmUrKztcbiAgICAgICAgdmFyIGlubmVyQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgaW5uZXJGcm9tKHByb2plY3QodmFsdWUsIGluZGV4KyspKS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uIChpbm5lclZhbHVlKSB7XG4gICAgICAgICAgICBvbkJlZm9yZU5leHQgPT09IG51bGwgfHwgb25CZWZvcmVOZXh0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkJlZm9yZU5leHQoaW5uZXJWYWx1ZSk7XG4gICAgICAgICAgICBpZiAoZXhwYW5kKSB7XG4gICAgICAgICAgICAgICAgb3V0ZXJOZXh0KGlubmVyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGlubmVyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpbm5lckNvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgfSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaW5uZXJDb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZS0tO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXJlZFZhbHVlID0gYnVmZmVyLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5uZXJTdWJTY2hlZHVsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgaW5uZXJTdWJTY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvSW5uZXJTdWIoYnVmZmVyZWRWYWx1ZSk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9Jbm5lclN1YihidWZmZXJlZFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGJ1ZmZlci5sZW5ndGggJiYgYWN0aXZlIDwgY29uY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2xvb3BfMSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrQ29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfTtcbiAgICBzb3VyY2Uuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBvdXRlck5leHQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXNDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgIGNoZWNrQ29tcGxldGUoKTtcbiAgICB9KSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYWRkaXRpb25hbEZpbmFsaXplciA9PT0gbnVsbCB8fCBhZGRpdGlvbmFsRmluYWxpemVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhZGRpdGlvbmFsRmluYWxpemVyKCk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlSW50ZXJuYWxzLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCwgX19zcHJlYWRBcnJheSB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSBcIi4uL29wZXJhdG9ycy9tYXBcIjtcbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIGNhbGxPckFwcGx5KGZuLCBhcmdzKSB7XG4gICAgcmV0dXJuIGlzQXJyYXkoYXJncykgPyBmbi5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChhcmdzKSkpIDogZm4oYXJncyk7XG59XG5leHBvcnQgZnVuY3Rpb24gbWFwT25lT3JNYW55QXJncyhmbikge1xuICAgIHJldHVybiBtYXAoZnVuY3Rpb24gKGFyZ3MpIHsgcmV0dXJuIGNhbGxPckFwcGx5KGZuLCBhcmdzKTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXBPbmVPck1hbnlBcmdzLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9pbm5lckZyb20nO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgbWVyZ2VNYXAgfSBmcm9tICcuLi9vcGVyYXRvcnMvbWVyZ2VNYXAnO1xuaW1wb3J0IHsgaXNBcnJheUxpa2UgfSBmcm9tICcuLi91dGlsL2lzQXJyYXlMaWtlJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgbWFwT25lT3JNYW55QXJncyB9IGZyb20gJy4uL3V0aWwvbWFwT25lT3JNYW55QXJncyc7XG52YXIgbm9kZUV2ZW50RW1pdHRlck1ldGhvZHMgPSBbJ2FkZExpc3RlbmVyJywgJ3JlbW92ZUxpc3RlbmVyJ107XG52YXIgZXZlbnRUYXJnZXRNZXRob2RzID0gWydhZGRFdmVudExpc3RlbmVyJywgJ3JlbW92ZUV2ZW50TGlzdGVuZXInXTtcbnZhciBqcXVlcnlNZXRob2RzID0gWydvbicsICdvZmYnXTtcbmV4cG9ydCBmdW5jdGlvbiBmcm9tRXZlbnQodGFyZ2V0LCBldmVudE5hbWUsIG9wdGlvbnMsIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24ob3B0aW9ucykpIHtcbiAgICAgICAgcmVzdWx0U2VsZWN0b3IgPSBvcHRpb25zO1xuICAgICAgICBvcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAocmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGZyb21FdmVudCh0YXJnZXQsIGV2ZW50TmFtZSwgb3B0aW9ucykucGlwZShtYXBPbmVPck1hbnlBcmdzKHJlc3VsdFNlbGVjdG9yKSk7XG4gICAgfVxuICAgIHZhciBfYSA9IF9fcmVhZChpc0V2ZW50VGFyZ2V0KHRhcmdldClcbiAgICAgICAgPyBldmVudFRhcmdldE1ldGhvZHMubWFwKGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7IHJldHVybiBmdW5jdGlvbiAoaGFuZGxlcikgeyByZXR1cm4gdGFyZ2V0W21ldGhvZE5hbWVdKGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucyk7IH07IH0pXG4gICAgICAgIDpcbiAgICAgICAgICAgIGlzTm9kZVN0eWxlRXZlbnRFbWl0dGVyKHRhcmdldClcbiAgICAgICAgICAgICAgICA/IG5vZGVFdmVudEVtaXR0ZXJNZXRob2RzLm1hcCh0b0NvbW1vbkhhbmRsZXJSZWdpc3RyeSh0YXJnZXQsIGV2ZW50TmFtZSkpXG4gICAgICAgICAgICAgICAgOiBpc0pRdWVyeVN0eWxlRXZlbnRFbWl0dGVyKHRhcmdldClcbiAgICAgICAgICAgICAgICAgICAgPyBqcXVlcnlNZXRob2RzLm1hcCh0b0NvbW1vbkhhbmRsZXJSZWdpc3RyeSh0YXJnZXQsIGV2ZW50TmFtZSkpXG4gICAgICAgICAgICAgICAgICAgIDogW10sIDIpLCBhZGQgPSBfYVswXSwgcmVtb3ZlID0gX2FbMV07XG4gICAgaWYgKCFhZGQpIHtcbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlKHRhcmdldCkpIHtcbiAgICAgICAgICAgIHJldHVybiBtZXJnZU1hcChmdW5jdGlvbiAoc3ViVGFyZ2V0KSB7IHJldHVybiBmcm9tRXZlbnQoc3ViVGFyZ2V0LCBldmVudE5hbWUsIG9wdGlvbnMpOyB9KShpbm5lckZyb20odGFyZ2V0KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFhZGQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBldmVudCB0YXJnZXQnKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmliZXIubmV4dCgxIDwgYXJncy5sZW5ndGggPyBhcmdzIDogYXJnc1swXSk7XG4gICAgICAgIH07XG4gICAgICAgIGFkZChoYW5kbGVyKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlbW92ZShoYW5kbGVyKTsgfTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHRvQ29tbW9uSGFuZGxlclJlZ2lzdHJ5KHRhcmdldCwgZXZlbnROYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7IHJldHVybiBmdW5jdGlvbiAoaGFuZGxlcikgeyByZXR1cm4gdGFyZ2V0W21ldGhvZE5hbWVdKGV2ZW50TmFtZSwgaGFuZGxlcik7IH07IH07XG59XG5mdW5jdGlvbiBpc05vZGVTdHlsZUV2ZW50RW1pdHRlcih0YXJnZXQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbih0YXJnZXQuYWRkTGlzdGVuZXIpICYmIGlzRnVuY3Rpb24odGFyZ2V0LnJlbW92ZUxpc3RlbmVyKTtcbn1cbmZ1bmN0aW9uIGlzSlF1ZXJ5U3R5bGVFdmVudEVtaXR0ZXIodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odGFyZ2V0Lm9uKSAmJiBpc0Z1bmN0aW9uKHRhcmdldC5vZmYpO1xufVxuZnVuY3Rpb24gaXNFdmVudFRhcmdldCh0YXJnZXQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbih0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcikgJiYgaXNGdW5jdGlvbih0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tRXZlbnQuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9TdWJzY3JpcHRpb24nO1xudmFyIEFjdGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFjdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBY3Rpb24oc2NoZWR1bGVyLCB3b3JrKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBBY3Rpb24ucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICByZXR1cm4gQWN0aW9uO1xufShTdWJzY3JpcHRpb24pKTtcbmV4cG9ydCB7IEFjdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWN0aW9uLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCwgX19zcHJlYWRBcnJheSB9IGZyb20gXCJ0c2xpYlwiO1xuZXhwb3J0IHZhciBpbnRlcnZhbFByb3ZpZGVyID0ge1xuICAgIHNldEludGVydmFsOiBmdW5jdGlvbiAoaGFuZGxlciwgdGltZW91dCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDI7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVsZWdhdGUgPSBpbnRlcnZhbFByb3ZpZGVyLmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLnNldEludGVydmFsKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGUuc2V0SW50ZXJ2YWwuYXBwbHkoZGVsZWdhdGUsIF9fc3ByZWFkQXJyYXkoW2hhbmRsZXIsIHRpbWVvdXRdLCBfX3JlYWQoYXJncykpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2V0SW50ZXJ2YWwuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtoYW5kbGVyLCB0aW1lb3V0XSwgX19yZWFkKGFyZ3MpKSk7XG4gICAgfSxcbiAgICBjbGVhckludGVydmFsOiBmdW5jdGlvbiAoaGFuZGxlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGludGVydmFsUHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIHJldHVybiAoKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5jbGVhckludGVydmFsKSB8fCBjbGVhckludGVydmFsKShoYW5kbGUpO1xuICAgIH0sXG4gICAgZGVsZWdhdGU6IHVuZGVmaW5lZCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcnZhbFByb3ZpZGVyLmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSAnLi9BY3Rpb24nO1xuaW1wb3J0IHsgaW50ZXJ2YWxQcm92aWRlciB9IGZyb20gJy4vaW50ZXJ2YWxQcm92aWRlcic7XG5pbXBvcnQgeyBhcnJSZW1vdmUgfSBmcm9tICcuLi91dGlsL2FyclJlbW92ZSc7XG52YXIgQXN5bmNBY3Rpb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBc3luY0FjdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBc3luY0FjdGlvbihzY2hlZHVsZXIsIHdvcmspIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgc2NoZWR1bGVyLCB3b3JrKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIF90aGlzLndvcmsgPSB3b3JrO1xuICAgICAgICBfdGhpcy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgdmFyIGlkID0gdGhpcy5pZDtcbiAgICAgICAgdmFyIHNjaGVkdWxlciA9IHRoaXMuc2NoZWR1bGVyO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5pZCA9IHRoaXMucmVjeWNsZUFzeW5jSWQoc2NoZWR1bGVyLCBpZCwgZGVsYXkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGVuZGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuZGVsYXkgPSBkZWxheTtcbiAgICAgICAgdGhpcy5pZCA9IChfYSA9IHRoaXMuaWQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRoaXMucmVxdWVzdEFzeW5jSWQoc2NoZWR1bGVyLCB0aGlzLmlkLCBkZWxheSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLnJlcXVlc3RBc3luY0lkID0gZnVuY3Rpb24gKHNjaGVkdWxlciwgX2lkLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgcmV0dXJuIGludGVydmFsUHJvdmlkZXIuc2V0SW50ZXJ2YWwoc2NoZWR1bGVyLmZsdXNoLmJpbmQoc2NoZWR1bGVyLCB0aGlzKSwgZGVsYXkpO1xuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLnJlY3ljbGVBc3luY0lkID0gZnVuY3Rpb24gKF9zY2hlZHVsZXIsIGlkLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgaWYgKGRlbGF5ICE9IG51bGwgJiYgdGhpcy5kZWxheSA9PT0gZGVsYXkgJiYgdGhpcy5wZW5kaW5nID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIGlkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpbnRlcnZhbFByb3ZpZGVyLmNsZWFySW50ZXJ2YWwoaWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUuZXhlY3V0ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdleGVjdXRpbmcgYSBjYW5jZWxsZWQgYWN0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgIHZhciBlcnJvciA9IHRoaXMuX2V4ZWN1dGUoc3RhdGUsIGRlbGF5KTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5wZW5kaW5nID09PSBmYWxzZSAmJiB0aGlzLmlkICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuaWQgPSB0aGlzLnJlY3ljbGVBc3luY0lkKHRoaXMuc2NoZWR1bGVyLCB0aGlzLmlkLCBudWxsKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLl9leGVjdXRlID0gZnVuY3Rpb24gKHN0YXRlLCBfZGVsYXkpIHtcbiAgICAgICAgdmFyIGVycm9yZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIGVycm9yVmFsdWU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLndvcmsoc3RhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBlcnJvcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGVycm9yVmFsdWUgPSBlID8gZSA6IG5ldyBFcnJvcignU2NoZWR1bGVkIGFjdGlvbiB0aHJldyBmYWxzeSBlcnJvcicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvcmVkKSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3JWYWx1ZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLCBpZCA9IF9hLmlkLCBzY2hlZHVsZXIgPSBfYS5zY2hlZHVsZXI7XG4gICAgICAgICAgICB2YXIgYWN0aW9ucyA9IHNjaGVkdWxlci5hY3Rpb25zO1xuICAgICAgICAgICAgdGhpcy53b3JrID0gdGhpcy5zdGF0ZSA9IHRoaXMuc2NoZWR1bGVyID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMucGVuZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgYXJyUmVtb3ZlKGFjdGlvbnMsIHRoaXMpO1xuICAgICAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5yZWN5Y2xlQXN5bmNJZChzY2hlZHVsZXIsIGlkLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGVsYXkgPSBudWxsO1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQXN5bmNBY3Rpb247XG59KEFjdGlvbikpO1xuZXhwb3J0IHsgQXN5bmNBY3Rpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFzeW5jQWN0aW9uLmpzLm1hcCIsImV4cG9ydCB2YXIgZGF0ZVRpbWVzdGFtcFByb3ZpZGVyID0ge1xuICAgIG5vdzogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKGRhdGVUaW1lc3RhbXBQcm92aWRlci5kZWxlZ2F0ZSB8fCBEYXRlKS5ub3coKTtcbiAgICB9LFxuICAgIGRlbGVnYXRlOiB1bmRlZmluZWQsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0ZVRpbWVzdGFtcFByb3ZpZGVyLmpzLm1hcCIsImltcG9ydCB7IGRhdGVUaW1lc3RhbXBQcm92aWRlciB9IGZyb20gJy4vc2NoZWR1bGVyL2RhdGVUaW1lc3RhbXBQcm92aWRlcic7XG52YXIgU2NoZWR1bGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTY2hlZHVsZXIoc2NoZWR1bGVyQWN0aW9uQ3Rvciwgbm93KSB7XG4gICAgICAgIGlmIChub3cgPT09IHZvaWQgMCkgeyBub3cgPSBTY2hlZHVsZXIubm93OyB9XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyQWN0aW9uQ3RvciA9IHNjaGVkdWxlckFjdGlvbkN0b3I7XG4gICAgICAgIHRoaXMubm93ID0gbm93O1xuICAgIH1cbiAgICBTY2hlZHVsZXIucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHdvcmssIGRlbGF5LCBzdGF0ZSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzLnNjaGVkdWxlckFjdGlvbkN0b3IodGhpcywgd29yaykuc2NoZWR1bGUoc3RhdGUsIGRlbGF5KTtcbiAgICB9O1xuICAgIFNjaGVkdWxlci5ub3cgPSBkYXRlVGltZXN0YW1wUHJvdmlkZXIubm93O1xuICAgIHJldHVybiBTY2hlZHVsZXI7XG59KCkpO1xuZXhwb3J0IHsgU2NoZWR1bGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TY2hlZHVsZXIuanMubWFwIiwiaW1wb3J0IHsgQXN5bmNBY3Rpb24gfSBmcm9tICcuL0FzeW5jQWN0aW9uJztcbmltcG9ydCB7IEFzeW5jU2NoZWR1bGVyIH0gZnJvbSAnLi9Bc3luY1NjaGVkdWxlcic7XG5leHBvcnQgdmFyIGFzeW5jU2NoZWR1bGVyID0gbmV3IEFzeW5jU2NoZWR1bGVyKEFzeW5jQWN0aW9uKTtcbmV4cG9ydCB2YXIgYXN5bmMgPSBhc3luY1NjaGVkdWxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFzeW5jLmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU2NoZWR1bGVyIH0gZnJvbSAnLi4vU2NoZWR1bGVyJztcbnZhciBBc3luY1NjaGVkdWxlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFzeW5jU2NoZWR1bGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFzeW5jU2NoZWR1bGVyKFNjaGVkdWxlckFjdGlvbiwgbm93KSB7XG4gICAgICAgIGlmIChub3cgPT09IHZvaWQgMCkgeyBub3cgPSBTY2hlZHVsZXIubm93OyB9XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIFNjaGVkdWxlckFjdGlvbiwgbm93KSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5hY3Rpb25zID0gW107XG4gICAgICAgIF90aGlzLl9hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBc3luY1NjaGVkdWxlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIHZhciBhY3Rpb25zID0gdGhpcy5hY3Rpb25zO1xuICAgICAgICBpZiAodGhpcy5fYWN0aXZlKSB7XG4gICAgICAgICAgICBhY3Rpb25zLnB1c2goYWN0aW9uKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZXJyb3I7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IHRydWU7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmICgoZXJyb3IgPSBhY3Rpb24uZXhlY3V0ZShhY3Rpb24uc3RhdGUsIGFjdGlvbi5kZWxheSkpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKChhY3Rpb24gPSBhY3Rpb25zLnNoaWZ0KCkpKTtcbiAgICAgICAgdGhpcy5fYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgd2hpbGUgKChhY3Rpb24gPSBhY3Rpb25zLnNoaWZ0KCkpKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEFzeW5jU2NoZWR1bGVyO1xufShTY2hlZHVsZXIpKTtcbmV4cG9ydCB7IEFzeW5jU2NoZWR1bGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Bc3luY1NjaGVkdWxlci5qcy5tYXAiLCJpbXBvcnQgeyBleGVjdXRlU2NoZWR1bGUgfSBmcm9tICcuLi91dGlsL2V4ZWN1dGVTY2hlZHVsZSc7XG5pbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBvYnNlcnZlT24oc2NoZWR1bGVyLCBkZWxheSkge1xuICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLm5leHQodmFsdWUpOyB9LCBkZWxheSk7IH0sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfSwgZGVsYXkpOyB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmVycm9yKGVycik7IH0sIGRlbGF5KTsgfSkpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JzZXJ2ZU9uLmpzLm1hcCIsImltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuZXhwb3J0IGZ1bmN0aW9uIHN1YnNjcmliZU9uKHNjaGVkdWxlciwgZGVsYXkpIHtcbiAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHN1YnNjcmliZXIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7IHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKHN1YnNjcmliZXIpOyB9LCBkZWxheSkpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Vic2NyaWJlT24uanMubWFwIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgZXhlY3V0ZVNjaGVkdWxlIH0gZnJvbSAnLi4vdXRpbC9leGVjdXRlU2NoZWR1bGUnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlQXN5bmNJdGVyYWJsZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKCFpbnB1dCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0l0ZXJhYmxlIGNhbm5vdCBiZSBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBpbnB1dFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICAgICAgICAgIGV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpdGVyYXRvci5uZXh0KCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHJlc3VsdC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIDAsIHRydWUpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlQXN5bmNJdGVyYWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBzY2hlZHVsZWQgfSBmcm9tICcuLi9zY2hlZHVsZWQvc2NoZWR1bGVkJztcbmltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4vaW5uZXJGcm9tJztcbmV4cG9ydCBmdW5jdGlvbiBmcm9tKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gc2NoZWR1bGVyID8gc2NoZWR1bGVkKGlucHV0LCBzY2hlZHVsZXIpIDogaW5uZXJGcm9tKGlucHV0KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb20uanMubWFwIiwiaW1wb3J0IHsgc2NoZWR1bGVPYnNlcnZhYmxlIH0gZnJvbSAnLi9zY2hlZHVsZU9ic2VydmFibGUnO1xuaW1wb3J0IHsgc2NoZWR1bGVQcm9taXNlIH0gZnJvbSAnLi9zY2hlZHVsZVByb21pc2UnO1xuaW1wb3J0IHsgc2NoZWR1bGVBcnJheSB9IGZyb20gJy4vc2NoZWR1bGVBcnJheSc7XG5pbXBvcnQgeyBzY2hlZHVsZUl0ZXJhYmxlIH0gZnJvbSAnLi9zY2hlZHVsZUl0ZXJhYmxlJztcbmltcG9ydCB7IHNjaGVkdWxlQXN5bmNJdGVyYWJsZSB9IGZyb20gJy4vc2NoZWR1bGVBc3luY0l0ZXJhYmxlJztcbmltcG9ydCB7IGlzSW50ZXJvcE9ic2VydmFibGUgfSBmcm9tICcuLi91dGlsL2lzSW50ZXJvcE9ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNQcm9taXNlIH0gZnJvbSAnLi4vdXRpbC9pc1Byb21pc2UnO1xuaW1wb3J0IHsgaXNBcnJheUxpa2UgfSBmcm9tICcuLi91dGlsL2lzQXJyYXlMaWtlJztcbmltcG9ydCB7IGlzSXRlcmFibGUgfSBmcm9tICcuLi91dGlsL2lzSXRlcmFibGUnO1xuaW1wb3J0IHsgaXNBc3luY0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0FzeW5jSXRlcmFibGUnO1xuaW1wb3J0IHsgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IgfSBmcm9tICcuLi91dGlsL3Rocm93VW5vYnNlcnZhYmxlRXJyb3InO1xuaW1wb3J0IHsgaXNSZWFkYWJsZVN0cmVhbUxpa2UgfSBmcm9tICcuLi91dGlsL2lzUmVhZGFibGVTdHJlYW1MaWtlJztcbmltcG9ydCB7IHNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlIH0gZnJvbSAnLi9zY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZSc7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVkKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNJbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZU9ic2VydmFibGUoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlQXJyYXkoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUHJvbWlzZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZVByb21pc2UoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXN5bmNJdGVyYWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZUFzeW5jSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzSXRlcmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVJdGVyYWJsZShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IoaW5wdXQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVkLmpzLm1hcCIsImltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcbmltcG9ydCB7IG9ic2VydmVPbiB9IGZyb20gJy4uL29wZXJhdG9ycy9vYnNlcnZlT24nO1xuaW1wb3J0IHsgc3Vic2NyaWJlT24gfSBmcm9tICcuLi9vcGVyYXRvcnMvc3Vic2NyaWJlT24nO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlT2JzZXJ2YWJsZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIGlubmVyRnJvbShpbnB1dCkucGlwZShzdWJzY3JpYmVPbihzY2hlZHVsZXIpLCBvYnNlcnZlT24oc2NoZWR1bGVyKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZU9ic2VydmFibGUuanMubWFwIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlQXJyYXkoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGkgPT09IGlucHV0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChpbnB1dFtpKytdKTtcbiAgICAgICAgICAgICAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NoZWR1bGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVBcnJheS5qcy5tYXAiLCJpbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XG5pbXBvcnQgeyBvYnNlcnZlT24gfSBmcm9tICcuLi9vcGVyYXRvcnMvb2JzZXJ2ZU9uJztcbmltcG9ydCB7IHN1YnNjcmliZU9uIH0gZnJvbSAnLi4vb3BlcmF0b3JzL3N1YnNjcmliZU9uJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZVByb21pc2UoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBpbm5lckZyb20oaW5wdXQpLnBpcGUoc3Vic2NyaWJlT24oc2NoZWR1bGVyKSwgb2JzZXJ2ZU9uKHNjaGVkdWxlcikpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVQcm9taXNlLmpzLm1hcCIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGl0ZXJhdG9yIGFzIFN5bWJvbF9pdGVyYXRvciB9IGZyb20gJy4uL3N5bWJvbC9pdGVyYXRvcic7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IGV4ZWN1dGVTY2hlZHVsZSB9IGZyb20gJy4uL3V0aWwvZXhlY3V0ZVNjaGVkdWxlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZUl0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGl0ZXJhdG9yO1xuICAgICAgICBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpdGVyYXRvciA9IGlucHV0W1N5bWJvbF9pdGVyYXRvcl0oKTtcbiAgICAgICAgICAgIGV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICAgICAgICAgIHZhciBkb25lO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIChfYSA9IGl0ZXJhdG9yLm5leHQoKSwgdmFsdWUgPSBfYS52YWx1ZSwgZG9uZSA9IF9hLmRvbmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIDAsIHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlzRnVuY3Rpb24oaXRlcmF0b3IgPT09IG51bGwgfHwgaXRlcmF0b3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGl0ZXJhdG9yLnJldHVybikgJiYgaXRlcmF0b3IucmV0dXJuKCk7IH07XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZUl0ZXJhYmxlLmpzLm1hcCIsImltcG9ydCB7IHNjaGVkdWxlQXN5bmNJdGVyYWJsZSB9IGZyb20gJy4vc2NoZWR1bGVBc3luY0l0ZXJhYmxlJztcbmltcG9ydCB7IHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IgfSBmcm9tICcuLi91dGlsL2lzUmVhZGFibGVTdHJlYW1MaWtlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIHNjaGVkdWxlQXN5bmNJdGVyYWJsZShyZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yKGlucHV0KSwgc2NoZWR1bGVyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlLmpzLm1hcCIsInZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiwgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlLCBnZXRLZXlzID0gT2JqZWN0LmtleXM7XG5leHBvcnQgZnVuY3Rpb24gYXJnc0FyZ0FycmF5T3JPYmplY3QoYXJncykge1xuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICB2YXIgZmlyc3RfMSA9IGFyZ3NbMF07XG4gICAgICAgIGlmIChpc0FycmF5KGZpcnN0XzEpKSB7XG4gICAgICAgICAgICByZXR1cm4geyBhcmdzOiBmaXJzdF8xLCBrZXlzOiBudWxsIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUE9KTyhmaXJzdF8xKSkge1xuICAgICAgICAgICAgdmFyIGtleXMgPSBnZXRLZXlzKGZpcnN0XzEpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBhcmdzOiBrZXlzLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBmaXJzdF8xW2tleV07IH0pLFxuICAgICAgICAgICAgICAgIGtleXM6IGtleXMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IGFyZ3M6IGFyZ3MsIGtleXM6IG51bGwgfTtcbn1cbmZ1bmN0aW9uIGlzUE9KTyhvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIGdldFByb3RvdHlwZU9mKG9iaikgPT09IG9iamVjdFByb3RvO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJnc0FyZ0FycmF5T3JPYmplY3QuanMubWFwIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gaXNTY2hlZHVsZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS5zY2hlZHVsZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1NjaGVkdWxlci5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IGlzU2NoZWR1bGVyIH0gZnJvbSAnLi9pc1NjaGVkdWxlcic7XG5mdW5jdGlvbiBsYXN0KGFycikge1xuICAgIHJldHVybiBhcnJbYXJyLmxlbmd0aCAtIDFdO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBvcFJlc3VsdFNlbGVjdG9yKGFyZ3MpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihsYXN0KGFyZ3MpKSA/IGFyZ3MucG9wKCkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gcG9wU2NoZWR1bGVyKGFyZ3MpIHtcbiAgICByZXR1cm4gaXNTY2hlZHVsZXIobGFzdChhcmdzKSkgPyBhcmdzLnBvcCgpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBvcE51bWJlcihhcmdzLCBkZWZhdWx0VmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIGxhc3QoYXJncykgPT09ICdudW1iZXInID8gYXJncy5wb3AoKSA6IGRlZmF1bHRWYWx1ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFyZ3MuanMubWFwIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgYXJnc0FyZ0FycmF5T3JPYmplY3QgfSBmcm9tICcuLi91dGlsL2FyZ3NBcmdBcnJheU9yT2JqZWN0JztcbmltcG9ydCB7IGZyb20gfSBmcm9tICcuL2Zyb20nO1xuaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuLi91dGlsL2lkZW50aXR5JztcbmltcG9ydCB7IG1hcE9uZU9yTWFueUFyZ3MgfSBmcm9tICcuLi91dGlsL21hcE9uZU9yTWFueUFyZ3MnO1xuaW1wb3J0IHsgcG9wUmVzdWx0U2VsZWN0b3IsIHBvcFNjaGVkdWxlciB9IGZyb20gJy4uL3V0aWwvYXJncyc7XG5pbXBvcnQgeyBjcmVhdGVPYmplY3QgfSBmcm9tICcuLi91dGlsL2NyZWF0ZU9iamVjdCc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuLi9vcGVyYXRvcnMvT3BlcmF0b3JTdWJzY3JpYmVyJztcbmltcG9ydCB7IGV4ZWN1dGVTY2hlZHVsZSB9IGZyb20gJy4uL3V0aWwvZXhlY3V0ZVNjaGVkdWxlJztcbmV4cG9ydCBmdW5jdGlvbiBjb21iaW5lTGF0ZXN0KCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgc2NoZWR1bGVyID0gcG9wU2NoZWR1bGVyKGFyZ3MpO1xuICAgIHZhciByZXN1bHRTZWxlY3RvciA9IHBvcFJlc3VsdFNlbGVjdG9yKGFyZ3MpO1xuICAgIHZhciBfYSA9IGFyZ3NBcmdBcnJheU9yT2JqZWN0KGFyZ3MpLCBvYnNlcnZhYmxlcyA9IF9hLmFyZ3MsIGtleXMgPSBfYS5rZXlzO1xuICAgIGlmIChvYnNlcnZhYmxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZyb20oW10sIHNjaGVkdWxlcik7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBuZXcgT2JzZXJ2YWJsZShjb21iaW5lTGF0ZXN0SW5pdChvYnNlcnZhYmxlcywgc2NoZWR1bGVyLCBrZXlzXG4gICAgICAgID9cbiAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZXMpIHsgcmV0dXJuIGNyZWF0ZU9iamVjdChrZXlzLCB2YWx1ZXMpOyB9XG4gICAgICAgIDpcbiAgICAgICAgICAgIGlkZW50aXR5KSk7XG4gICAgcmV0dXJuIHJlc3VsdFNlbGVjdG9yID8gcmVzdWx0LnBpcGUobWFwT25lT3JNYW55QXJncyhyZXN1bHRTZWxlY3RvcikpIDogcmVzdWx0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbWJpbmVMYXRlc3RJbml0KG9ic2VydmFibGVzLCBzY2hlZHVsZXIsIHZhbHVlVHJhbnNmb3JtKSB7XG4gICAgaWYgKHZhbHVlVHJhbnNmb3JtID09PSB2b2lkIDApIHsgdmFsdWVUcmFuc2Zvcm0gPSBpZGVudGl0eTsgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBtYXliZVNjaGVkdWxlKHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IG9ic2VydmFibGVzLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICAgICAgICAgIHZhciBhY3RpdmUgPSBsZW5ndGg7XG4gICAgICAgICAgICB2YXIgcmVtYWluaW5nRmlyc3RWYWx1ZXMgPSBsZW5ndGg7XG4gICAgICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICAgICAgbWF5YmVTY2hlZHVsZShzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGZyb20ob2JzZXJ2YWJsZXNbaV0sIHNjaGVkdWxlcik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoYXNGaXJzdFZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzW2ldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc0ZpcnN0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNGaXJzdFZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1haW5pbmdGaXJzdFZhbHVlcy0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZW1haW5pbmdGaXJzdFZhbHVlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZVRyYW5zZm9ybSh2YWx1ZXMuc2xpY2UoKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIS0tYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfSwgc3Vic2NyaWJlcik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIF9sb29wXzEoaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHN1YnNjcmliZXIpO1xuICAgIH07XG59XG5mdW5jdGlvbiBtYXliZVNjaGVkdWxlKHNjaGVkdWxlciwgZXhlY3V0ZSwgc3Vic2NyaXB0aW9uKSB7XG4gICAgaWYgKHNjaGVkdWxlcikge1xuICAgICAgICBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaXB0aW9uLCBzY2hlZHVsZXIsIGV4ZWN1dGUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZXhlY3V0ZSgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbWJpbmVMYXRlc3QuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU9iamVjdChrZXlzLCB2YWx1ZXMpIHtcbiAgICByZXR1cm4ga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwga2V5LCBpKSB7IHJldHVybiAoKHJlc3VsdFtrZXldID0gdmFsdWVzW2ldKSwgcmVzdWx0KTsgfSwge30pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlT2JqZWN0LmpzLm1hcCIsImV4cG9ydCB2YXIgZW52aXJvbm1lbnRzID0ge1xuICAgIEFQSV9VUkw6IFwiaHR0cDovL2xvY2FsaG9zdDozMDAwXCJcbn07XG4iLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5leHBvcnQgdmFyIEVNUFRZID0gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHsgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfSk7XG5leHBvcnQgZnVuY3Rpb24gZW1wdHkoc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIHNjaGVkdWxlciA/IGVtcHR5U2NoZWR1bGVkKHNjaGVkdWxlcikgOiBFTVBUWTtcbn1cbmZ1bmN0aW9uIGVtcHR5U2NoZWR1bGVkKHNjaGVkdWxlcikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikgeyByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfSk7IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW1wdHkuanMubWFwIiwiaW1wb3J0IHsgRU1QVFkgfSBmcm9tICcuLi9vYnNlcnZhYmxlL2VtcHR5JztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHRha2UoY291bnQpIHtcbiAgICByZXR1cm4gY291bnQgPD0gMFxuICAgICAgICA/XG4gICAgICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiBFTVBUWTsgfVxuICAgICAgICA6IG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICAgICAgdmFyIHNlZW4gPSAwO1xuICAgICAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCsrc2VlbiA8PSBjb3VudCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY291bnQgPD0gc2Vlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRha2UuanMubWFwIiwiaW1wb3J0IHsgY29uY2F0IH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9jb25jYXQnO1xuaW1wb3J0IHsgdGFrZSB9IGZyb20gJy4vdGFrZSc7XG5pbXBvcnQgeyBpZ25vcmVFbGVtZW50cyB9IGZyb20gJy4vaWdub3JlRWxlbWVudHMnO1xuaW1wb3J0IHsgbWFwVG8gfSBmcm9tICcuL21hcFRvJztcbmltcG9ydCB7IG1lcmdlTWFwIH0gZnJvbSAnLi9tZXJnZU1hcCc7XG5pbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XG5leHBvcnQgZnVuY3Rpb24gZGVsYXlXaGVuKGRlbGF5RHVyYXRpb25TZWxlY3Rvciwgc3Vic2NyaXB0aW9uRGVsYXkpIHtcbiAgICBpZiAoc3Vic2NyaXB0aW9uRGVsYXkpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBjb25jYXQoc3Vic2NyaXB0aW9uRGVsYXkucGlwZSh0YWtlKDEpLCBpZ25vcmVFbGVtZW50cygpKSwgc291cmNlLnBpcGUoZGVsYXlXaGVuKGRlbGF5RHVyYXRpb25TZWxlY3RvcikpKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlTWFwKGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgpIHsgcmV0dXJuIGlubmVyRnJvbShkZWxheUR1cmF0aW9uU2VsZWN0b3IodmFsdWUsIGluZGV4KSkucGlwZSh0YWtlKDEpLCBtYXBUbyh2YWx1ZSkpOyB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlbGF5V2hlbi5qcy5tYXAiLCJpbXBvcnQgeyBjb25jYXRBbGwgfSBmcm9tICcuLi9vcGVyYXRvcnMvY29uY2F0QWxsJztcbmltcG9ydCB7IHBvcFNjaGVkdWxlciB9IGZyb20gJy4uL3V0aWwvYXJncyc7XG5pbXBvcnQgeyBmcm9tIH0gZnJvbSAnLi9mcm9tJztcbmV4cG9ydCBmdW5jdGlvbiBjb25jYXQoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBjb25jYXRBbGwoKShmcm9tKGFyZ3MsIHBvcFNjaGVkdWxlcihhcmdzKSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uY2F0LmpzLm1hcCIsImltcG9ydCB7IG1lcmdlTWFwIH0gZnJvbSAnLi9tZXJnZU1hcCc7XG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4uL3V0aWwvaWRlbnRpdHknO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQWxsKGNvbmN1cnJlbnQpIHtcbiAgICBpZiAoY29uY3VycmVudCA9PT0gdm9pZCAwKSB7IGNvbmN1cnJlbnQgPSBJbmZpbml0eTsgfVxuICAgIHJldHVybiBtZXJnZU1hcChpZGVudGl0eSwgY29uY3VycmVudCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZUFsbC5qcy5tYXAiLCJpbXBvcnQgeyBtZXJnZUFsbCB9IGZyb20gJy4vbWVyZ2VBbGwnO1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdEFsbCgpIHtcbiAgICByZXR1cm4gbWVyZ2VBbGwoMSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25jYXRBbGwuanMubWFwIiwiaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi4vdXRpbC9ub29wJztcbmV4cG9ydCBmdW5jdGlvbiBpZ25vcmVFbGVtZW50cygpIHtcbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIG5vb3ApKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlnbm9yZUVsZW1lbnRzLmpzLm1hcCIsImltcG9ydCB7IG1hcCB9IGZyb20gJy4vbWFwJztcbmV4cG9ydCBmdW5jdGlvbiBtYXBUbyh2YWx1ZSkge1xuICAgIHJldHVybiBtYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gdmFsdWU7IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwVG8uanMubWFwIiwiaW1wb3J0IHsgY29uY2F0TWFwLCBkZWxheSwgZnJvbSwgb2YgfSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHsgZHJhd1Jlc3VsdHMgfSBmcm9tIFwiLi4vZHJhdy9kcmF3ZnVuY3Rpb25cIjtcbnZhciBDb21wZXRpdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb21wZXRpdGlvbihvcHBvbmVudHNPYnMsIG15VGVhbSkge1xuICAgICAgICB0aGlzLm9wcG9uZW50cyA9IFtdO1xuICAgICAgICB0aGlzLm15VGVhbSA9IG15VGVhbTtcbiAgICAgICAgdGhpcy5vcHBvbmVudHNPYnMgPSBvcHBvbmVudHNPYnM7XG4gICAgfVxuICAgIENvbXBldGl0aW9uLnByb3RvdHlwZS5wbGF5R2FtZXMgPSBmdW5jdGlvbiAob3Bwb25lbnRzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGZyb20ob3Bwb25lbnRzKVxuICAgICAgICAgICAgLnBpcGUoY29uY2F0TWFwKGZ1bmN0aW9uIChvcHApIHsgcmV0dXJuIG9mKG9wcCkucGlwZShkZWxheSgxMDAwKSk7IH0pKVxuICAgICAgICAgICAgLnN1YnNjcmliZShmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmRldGVybWluZVdpbm5lcihfdGhpcy5teVRlYW0ubmFtZSwgX3RoaXMubXlUZWFtLmdldFRlYW1Db2VmKCksIGRhdGEpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbXBldGl0aW9uLnByb3RvdHlwZS5zdGFydENvbXBldGl0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLm9wcG9uZW50c09icy5zdWJzY3JpYmUoZnVuY3Rpb24gKG9wcHMpIHtcbiAgICAgICAgICAgIF90aGlzLnBsYXlHYW1lcyhvcHBzKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBDb21wZXRpdGlvbi5wcm90b3R5cGUuZGV0ZXJtaW5lV2lubmVyID0gZnVuY3Rpb24gKG15VGVhbU5hbWUsIG15VGVhbUNvZWZmLCBvcHBvbmVudCkge1xuICAgICAgICB2YXIgbXlTY29yZSwgb3Bwb25lbnRTY29yZTtcbiAgICAgICAgaWYgKG15VGVhbUNvZWZmID49IG9wcG9uZW50LmNvZWZmaWNpZW50KSB7XG4gICAgICAgICAgICBteVNjb3JlID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogNSk7XG4gICAgICAgICAgICBvcHBvbmVudFNjb3JlID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogNCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBteVNjb3JlID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogNCk7XG4gICAgICAgICAgICBvcHBvbmVudFNjb3JlID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogNSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG91dGNvbWU7XG4gICAgICAgIGlmIChteVNjb3JlID4gb3Bwb25lbnRTY29yZSlcbiAgICAgICAgICAgIG91dGNvbWUgPSBcIldJTlwiO1xuICAgICAgICBlbHNlIGlmIChteVNjb3JlIDwgb3Bwb25lbnRTY29yZSlcbiAgICAgICAgICAgIG91dGNvbWUgPSBcIkxPU1RcIjtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgb3V0Y29tZSA9IFwiRFJBV1wiO1xuICAgICAgICBkcmF3UmVzdWx0cyhteVRlYW1OYW1lLCBvcHBvbmVudC5uYW1lLCBteVNjb3JlLCBvcHBvbmVudFNjb3JlLCBvdXRjb21lKTtcbiAgICB9O1xuICAgIHJldHVybiBDb21wZXRpdGlvbjtcbn0oKSk7XG5leHBvcnQgeyBDb21wZXRpdGlvbiB9O1xuIiwiaW1wb3J0IHsgbWVyZ2VNYXAgfSBmcm9tICcuL21lcmdlTWFwJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdE1hcChwcm9qZWN0LCByZXN1bHRTZWxlY3Rvcikge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHJlc3VsdFNlbGVjdG9yKSA/IG1lcmdlTWFwKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yLCAxKSA6IG1lcmdlTWFwKHByb2plY3QsIDEpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uY2F0TWFwLmpzLm1hcCIsImltcG9ydCB7IHBvcFNjaGVkdWxlciB9IGZyb20gJy4uL3V0aWwvYXJncyc7XG5pbXBvcnQgeyBmcm9tIH0gZnJvbSAnLi9mcm9tJztcbmV4cG9ydCBmdW5jdGlvbiBvZigpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIHNjaGVkdWxlciA9IHBvcFNjaGVkdWxlcihhcmdzKTtcbiAgICByZXR1cm4gZnJvbShhcmdzLCBzY2hlZHVsZXIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2YuanMubWFwIiwiaW1wb3J0IHsgYXN5bmNTY2hlZHVsZXIgfSBmcm9tICcuLi9zY2hlZHVsZXIvYXN5bmMnO1xuaW1wb3J0IHsgZGVsYXlXaGVuIH0gZnJvbSAnLi9kZWxheVdoZW4nO1xuaW1wb3J0IHsgdGltZXIgfSBmcm9tICcuLi9vYnNlcnZhYmxlL3RpbWVyJztcbmV4cG9ydCBmdW5jdGlvbiBkZWxheShkdWUsIHNjaGVkdWxlcikge1xuICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkgeyBzY2hlZHVsZXIgPSBhc3luY1NjaGVkdWxlcjsgfVxuICAgIHZhciBkdXJhdGlvbiA9IHRpbWVyKGR1ZSwgc2NoZWR1bGVyKTtcbiAgICByZXR1cm4gZGVsYXlXaGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGR1cmF0aW9uOyB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlbGF5LmpzLm1hcCIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGFzeW5jIGFzIGFzeW5jU2NoZWR1bGVyIH0gZnJvbSAnLi4vc2NoZWR1bGVyL2FzeW5jJztcbmltcG9ydCB7IGlzU2NoZWR1bGVyIH0gZnJvbSAnLi4vdXRpbC9pc1NjaGVkdWxlcic7XG5pbXBvcnQgeyBpc1ZhbGlkRGF0ZSB9IGZyb20gJy4uL3V0aWwvaXNEYXRlJztcbmV4cG9ydCBmdW5jdGlvbiB0aW1lcihkdWVUaW1lLCBpbnRlcnZhbE9yU2NoZWR1bGVyLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoZHVlVGltZSA9PT0gdm9pZCAwKSB7IGR1ZVRpbWUgPSAwOyB9XG4gICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7IHNjaGVkdWxlciA9IGFzeW5jU2NoZWR1bGVyOyB9XG4gICAgdmFyIGludGVydmFsRHVyYXRpb24gPSAtMTtcbiAgICBpZiAoaW50ZXJ2YWxPclNjaGVkdWxlciAhPSBudWxsKSB7XG4gICAgICAgIGlmIChpc1NjaGVkdWxlcihpbnRlcnZhbE9yU2NoZWR1bGVyKSkge1xuICAgICAgICAgICAgc2NoZWR1bGVyID0gaW50ZXJ2YWxPclNjaGVkdWxlcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGludGVydmFsRHVyYXRpb24gPSBpbnRlcnZhbE9yU2NoZWR1bGVyO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgZHVlID0gaXNWYWxpZERhdGUoZHVlVGltZSkgPyArZHVlVGltZSAtIHNjaGVkdWxlci5ub3coKSA6IGR1ZVRpbWU7XG4gICAgICAgIGlmIChkdWUgPCAwKSB7XG4gICAgICAgICAgICBkdWUgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuID0gMDtcbiAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KG4rKyk7XG4gICAgICAgICAgICAgICAgaWYgKDAgPD0gaW50ZXJ2YWxEdXJhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlKHVuZGVmaW5lZCwgaW50ZXJ2YWxEdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBkdWUpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZXIuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWREYXRlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgRGF0ZSAmJiAhaXNOYU4odmFsdWUpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNEYXRlLmpzLm1hcCIsInZhciBUZWFtID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRlYW0oZHJpdmVycykge1xuICAgICAgICB0aGlzLmRyaXZlcnMgPSBkcml2ZXJzO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkJlc3REcml2ZXJzXCI7XG4gICAgfVxuICAgIFRlYW0ucHJvdG90eXBlLmdldFRlYW1Db2VmID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29lZiA9IDA7XG4gICAgICAgIHRoaXMuZHJpdmVycy5mb3JFYWNoKGZ1bmN0aW9uIChwKSB7XG4gICAgICAgICAgICBjb2VmICs9IDIgKiBwLndpbnMgKyBwLnNwZWVkICogcC50aW1lO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvZWYgLyB0aGlzLmRyaXZlcnMubGVuZ3RoO1xuICAgIH07XG4gICAgcmV0dXJuIFRlYW07XG59KCkpO1xuZXhwb3J0IHsgVGVhbSB9O1xuIiwiaW1wb3J0IHsgY29tYmluZUxhdGVzdCwgZGVib3VuY2VUaW1lLCBmaWx0ZXIsIGZyb20sIGZyb21FdmVudCwgbWFwLCBzd2l0Y2hNYXAsIH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7IGVudmlyb25tZW50cyB9IGZyb20gXCIuLi9lbnZpcm9ubWVudHNcIjtcbmltcG9ydCB7IENvbXBldGl0aW9uIH0gZnJvbSBcIi4uL21vZGVscy9yYWNpbmdcIjtcbmltcG9ydCB7IFRlYW0gfSBmcm9tIFwiLi4vbW9kZWxzL3RlYW1cIjtcbmltcG9ydCB7IGRyYXdEcml2ZXIgfSBmcm9tIFwiLi4vZHJhdy9kcmF3ZnVuY3Rpb25cIjtcbmV4cG9ydCBmdW5jdGlvbiBwbGF5ZXJJbnB1dE9icyhpbnB1dEZpZWxkLCBkcml2ZXJDb250YWluZXIsIGRyaXZlclBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIGZyb21FdmVudChpbnB1dEZpZWxkLCBcImlucHV0XCIpLnBpcGUoZGVib3VuY2VUaW1lKDUwMCksIG1hcChmdW5jdGlvbiAoZXYpIHsgcmV0dXJuIGV2LnRhcmdldC52YWx1ZTsgfSksIGZpbHRlcihmdW5jdGlvbiAoZHJpdmVyTmFtZSkgeyByZXR1cm4gZHJpdmVyTmFtZS5sZW5ndGggPj0gMzsgfSksIHN3aXRjaE1hcChmdW5jdGlvbiAoZHJpdmVyTmFtZSkge1xuICAgICAgICByZXR1cm4gZ2V0UGxheWVyKGRyaXZlck5hbWUsIGRyaXZlckNvbnRhaW5lciwgZHJpdmVyUG9zaXRpb24pO1xuICAgIH0pLCBtYXAoZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIGRhdGFbMF07IH0pKTtcbn1cbmZ1bmN0aW9uIGdldFBsYXllcihkcml2ZXJOYW1lLCBkcml2ZXJDb250YWluZXIsIGRyaXZlclBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIGZyb20oZmV0Y2goXCJcIi5jb25jYXQoZW52aXJvbm1lbnRzLkFQSV9VUkwsIFwiL1wiKS5jb25jYXQoZHJpdmVyUG9zaXRpb24sIFwiLz9uYW1lPVwiKS5jb25jYXQoZHJpdmVyTmFtZSkpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgaWYgKHJlcy5vaylcbiAgICAgICAgICAgIHJldHVybiByZXMuanNvbigpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQbGF5ZXIgbm90IGZvdW5kXCIpO1xuICAgIH0pXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7IHJldHVybiAoZHJpdmVyQ29udGFpbmVyLmlubmVySFRNTCA9IFwiUGxheWVyIG5vdCBmb3VuZFwiKTsgfSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VUZWFtT2JzKGlucHV0RmllbGRzLCBwb3NpdGlvbkRpdnMsIGRyaXZlckRldGFpbHMsIGRyaXZlck5hbWVMYWJlbHMsIGRyaXZlclN0YXRzTGFiZWxzLCBkcml2ZXJJbWdDYXIpIHtcbiAgICB2YXIgZHJpdmVyMSA9IHBsYXllcklucHV0T2JzKGlucHV0RmllbGRzWzBdLCBwb3NpdGlvbkRpdnNbMF0sIFwiZHJpdmVyMVwiKTtcbiAgICBkcml2ZXIxLnN1YnNjcmliZShmdW5jdGlvbiAoZHJpdmVyKSB7XG4gICAgICAgIHJldHVybiBkcmF3RHJpdmVyKHBvc2l0aW9uRGl2c1swXSwgZHJpdmVyLCBkcml2ZXJEZXRhaWxzWzBdLCBkcml2ZXJOYW1lTGFiZWxzWzBdLCBkcml2ZXJTdGF0c0xhYmVsc1swXSwgZHJpdmVySW1nQ2FyWzBdKTtcbiAgICB9KTtcbiAgICB2YXIgZHJpdmVyMiA9IHBsYXllcklucHV0T2JzKGlucHV0RmllbGRzWzFdLCBwb3NpdGlvbkRpdnNbMV0sIFwiZHJpdmVyMlwiKTtcbiAgICBkcml2ZXIyLnN1YnNjcmliZShmdW5jdGlvbiAoZHJpdmVyKSB7XG4gICAgICAgIHJldHVybiBkcmF3RHJpdmVyKHBvc2l0aW9uRGl2c1sxXSwgZHJpdmVyLCBkcml2ZXJEZXRhaWxzWzFdLCBkcml2ZXJOYW1lTGFiZWxzWzFdLCBkcml2ZXJTdGF0c0xhYmVsc1sxXSwgZHJpdmVySW1nQ2FyWzFdKTtcbiAgICB9KTtcbiAgICB2YXIgZHJpdmVyMyA9IHBsYXllcklucHV0T2JzKGlucHV0RmllbGRzWzJdLCBwb3NpdGlvbkRpdnNbMl0sIFwiZHJpdmVyM1wiKTtcbiAgICBkcml2ZXIzLnN1YnNjcmliZShmdW5jdGlvbiAoZHJpdmVyKSB7XG4gICAgICAgIHJldHVybiBkcmF3RHJpdmVyKHBvc2l0aW9uRGl2c1syXSwgZHJpdmVyLCBkcml2ZXJEZXRhaWxzWzJdLCBkcml2ZXJOYW1lTGFiZWxzWzJdLCBkcml2ZXJTdGF0c0xhYmVsc1syXSwgZHJpdmVySW1nQ2FyWzJdKTtcbiAgICB9KTtcbiAgICBjb21iaW5lTGF0ZXN0KFtcbiAgICAgICAgZHJpdmVyMSxcbiAgICAgICAgZHJpdmVyMixcbiAgICAgICAgZHJpdmVyM1xuICAgIF0pLnN1YnNjcmliZShmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIGRyMSA9IF9hWzBdLCBkcjIgPSBfYVsxXSwgZHIzID0gX2FbMl07XG4gICAgICAgIGlmIChkcjEgJiYgZHIyICYmIGRyMykge1xuICAgICAgICAgICAgdmFyIHRlYW0gPSBuZXcgVGVhbShbZHIxLCBkcjIsIGRyM10pO1xuICAgICAgICAgICAgdmFyIGNvbXBldGl0aW9uID0gbmV3IENvbXBldGl0aW9uKGdldE9wcG9uZW50cygpLCB0ZWFtKTtcbiAgICAgICAgICAgIGNvbXBldGl0aW9uLnN0YXJ0Q29tcGV0aXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwid3JvbmcgaW5wdXRcIik7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRPcHBvbmVudHMoKSB7XG4gICAgcmV0dXJuIGZyb20oZmV0Y2goXCJcIi5jb25jYXQoZW52aXJvbm1lbnRzLkFQSV9VUkwsIFwiL3RlYW1zXCIpKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgIGlmIChyZXMub2spXG4gICAgICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGVhbSBub3QgZm91bmRcIik7XG4gICAgfSlcbiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIGNvbnNvbGUubG9nKFwiZXJyb3JcIik7IH0pKTtcbn1cbiIsImltcG9ydCB7IGFzeW5jU2NoZWR1bGVyIH0gZnJvbSAnLi4vc2NoZWR1bGVyL2FzeW5jJztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGRlYm91bmNlVGltZShkdWVUaW1lLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNTY2hlZHVsZXI7IH1cbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBhY3RpdmVUYXNrID0gbnVsbDtcbiAgICAgICAgdmFyIGxhc3RWYWx1ZSA9IG51bGw7XG4gICAgICAgIHZhciBsYXN0VGltZSA9IG51bGw7XG4gICAgICAgIHZhciBlbWl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGFjdGl2ZVRhc2spIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVUYXNrLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgYWN0aXZlVGFzayA9IG51bGw7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gbGFzdFZhbHVlO1xuICAgICAgICAgICAgICAgIGxhc3RWYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZnVuY3Rpb24gZW1pdFdoZW5JZGxlKCkge1xuICAgICAgICAgICAgdmFyIHRhcmdldFRpbWUgPSBsYXN0VGltZSArIGR1ZVRpbWU7XG4gICAgICAgICAgICB2YXIgbm93ID0gc2NoZWR1bGVyLm5vdygpO1xuICAgICAgICAgICAgaWYgKG5vdyA8IHRhcmdldFRpbWUpIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVUYXNrID0gdGhpcy5zY2hlZHVsZSh1bmRlZmluZWQsIHRhcmdldFRpbWUgLSBub3cpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKGFjdGl2ZVRhc2spO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVtaXQoKTtcbiAgICAgICAgfVxuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGxhc3RWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgbGFzdFRpbWUgPSBzY2hlZHVsZXIubm93KCk7XG4gICAgICAgICAgICBpZiAoIWFjdGl2ZVRhc2spIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVUYXNrID0gc2NoZWR1bGVyLnNjaGVkdWxlKGVtaXRXaGVuSWRsZSwgZHVlVGltZSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQoYWN0aXZlVGFzayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGVtaXQoKTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBsYXN0VmFsdWUgPSBhY3RpdmVUYXNrID0gbnVsbDtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVib3VuY2VUaW1lLmpzLm1hcCIsImltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlcihwcmVkaWNhdGUsIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gcHJlZGljYXRlLmNhbGwodGhpc0FyZywgdmFsdWUsIGluZGV4KyspICYmIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7IH0pKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbHRlci5qcy5tYXAiLCJpbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XG5pbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBzd2l0Y2hNYXAocHJvamVjdCwgcmVzdWx0U2VsZWN0b3IpIHtcbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpbm5lclN1YnNjcmliZXIgPSBudWxsO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgaXNDb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICB2YXIgY2hlY2tDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlzQ29tcGxldGUgJiYgIWlubmVyU3Vic2NyaWJlciAmJiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7IH07XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaW5uZXJTdWJzY3JpYmVyID09PSBudWxsIHx8IGlubmVyU3Vic2NyaWJlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5uZXJTdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB2YXIgaW5uZXJJbmRleCA9IDA7XG4gICAgICAgICAgICB2YXIgb3V0ZXJJbmRleCA9IGluZGV4Kys7XG4gICAgICAgICAgICBpbm5lckZyb20ocHJvamVjdCh2YWx1ZSwgb3V0ZXJJbmRleCkpLnN1YnNjcmliZSgoaW5uZXJTdWJzY3JpYmVyID0gY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uIChpbm5lclZhbHVlKSB7IHJldHVybiBzdWJzY3JpYmVyLm5leHQocmVzdWx0U2VsZWN0b3IgPyByZXN1bHRTZWxlY3Rvcih2YWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCsrKSA6IGlubmVyVmFsdWUpOyB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaW5uZXJTdWJzY3JpYmVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICBjaGVja0NvbXBsZXRlKCk7XG4gICAgICAgICAgICB9KSkpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpc0NvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIGNoZWNrQ29tcGxldGUoKTtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3dpdGNoTWFwLmpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZUVsZW1lbnRzLCBkcmF3Qm9keUNvbnRhaW5lciB9IGZyb20gXCIuL2RyYXcvZHJhd2Z1bmN0aW9uXCI7XG5pbXBvcnQgeyBtYWtlVGVhbU9icyB9IGZyb20gXCIuL2NvbnRyb2xsZXJzL29ic2VydmFibGVzXCI7XG52YXIgaW5wdXRGaWVsZHMgPSBbXTtcbnZhciB0ZWFtVmlld0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG52YXIgZHJpdmVyRGV0YWlscyA9IFtdO1xudmFyIGRyaXZlck5hbWVMYWJlbHMgPSBbXTtcbnZhciBkcml2ZXJTdGF0c0xhYmVscyA9IFtdO1xudmFyIGRyaXZlckltZ0NhciA9IFtdO1xudmFyIHBvc2l0aW9uRGl2cyA9IFtdO1xuY3JlYXRlRWxlbWVudHMoaW5wdXRGaWVsZHMsIGRyaXZlckRldGFpbHMsIGRyaXZlck5hbWVMYWJlbHMsIGRyaXZlclN0YXRzTGFiZWxzLCBkcml2ZXJJbWdDYXIsIHRlYW1WaWV3Q29udGFpbmVyLCBwb3NpdGlvbkRpdnMpO1xuZHJhd0JvZHlDb250YWluZXIoZG9jdW1lbnQuYm9keSwgdGVhbVZpZXdDb250YWluZXIsIGlucHV0RmllbGRzKTtcbm1ha2VUZWFtT2JzKGlucHV0RmllbGRzLCBwb3NpdGlvbkRpdnMsIGRyaXZlckRldGFpbHMsIGRyaXZlck5hbWVMYWJlbHMsIGRyaXZlclN0YXRzTGFiZWxzLCBkcml2ZXJJbWdDYXIpO1xudmFyIHJlc3VsdHNEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xucmVzdWx0c0Rpdi5jbGFzc0xpc3QuYWRkKFwicmVzdWx0c0RpdlwiKTtcbmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocmVzdWx0c0Rpdik7XG4iXSwibmFtZXMiOlsiZHJhd0RyaXZlciIsImhvc3QiLCJkcml2ZXIiLCJkcml2ZXJEZXRhaWxzRGl2IiwiZHJpdmVyTmFtZUxibCIsImRyaXZlclN0YXRzTGJsIiwiZHJpdmVySW1nQ2FyIiwiYXBwZW5kQ2hpbGQiLCJpbm5lckhUTUwiLCJuYW1lIiwiY29uY2F0IiwiY2x1YiIsIndpbnMiLCJzcGVlZCIsInNyYyIsImNhciIsImV4dGVuZFN0YXRpY3MiLCJkIiwiYiIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiX19leHRlbmRzIiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiX18iLCJ0aGlzIiwiY29uc3RydWN0b3IiLCJjcmVhdGUiLCJfX2dlbmVyYXRvciIsInRoaXNBcmciLCJib2R5IiwiZiIsInkiLCJ0IiwiZyIsIl8iLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwib3BzIiwibmV4dCIsInZlcmIiLCJTeW1ib2wiLCJpdGVyYXRvciIsIm4iLCJ2Iiwib3AiLCJkb25lIiwidmFsdWUiLCJwb3AiLCJsZW5ndGgiLCJwdXNoIiwiZSIsInN0ZXAiLCJfX3ZhbHVlcyIsIm8iLCJzIiwibSIsImkiLCJfX3JlYWQiLCJyIiwiYXIiLCJlcnJvciIsIl9fc3ByZWFkQXJyYXkiLCJ0byIsImZyb20iLCJwYWNrIiwiYXJndW1lbnRzIiwibCIsInNsaWNlIiwiX19hd2FpdCIsImlzQXJyYXlMaWtlIiwieCIsImlzRnVuY3Rpb24iLCJpc1Byb21pc2UiLCJ0aGVuIiwiY3RvckZ1bmMiLCJVbnN1YnNjcmlwdGlvbkVycm9yIiwiZXJyb3JzIiwiaW5zdGFuY2UiLCJFcnJvciIsInN0YWNrIiwibWVzc2FnZSIsIm1hcCIsImVyciIsInRvU3RyaW5nIiwiam9pbiIsImFyclJlbW92ZSIsImFyciIsIml0ZW0iLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJTdWJzY3JpcHRpb24iLCJpbml0aWFsVGVhcmRvd24iLCJjbG9zZWQiLCJfcGFyZW50YWdlIiwiX2ZpbmFsaXplcnMiLCJ1bnN1YnNjcmliZSIsImVfMSIsIl9hIiwiZV8yIiwiX2IiLCJpc0FycmF5IiwiX3BhcmVudGFnZV8xIiwiX3BhcmVudGFnZV8xXzEiLCJyZW1vdmUiLCJlXzFfMSIsInJldHVybiIsImluaXRpYWxGaW5hbGl6ZXIiLCJfZmluYWxpemVyc18xIiwiX2ZpbmFsaXplcnNfMV8xIiwiZmluYWxpemVyIiwiZXhlY0ZpbmFsaXplciIsImVfMl8xIiwiYWRkIiwidGVhcmRvd24iLCJfaGFzUGFyZW50IiwiX2FkZFBhcmVudCIsInBhcmVudCIsImluY2x1ZGVzIiwiX3JlbW92ZVBhcmVudCIsIkVNUFRZIiwiZW1wdHkiLCJpc1N1YnNjcmlwdGlvbiIsImNvbmZpZyIsIm9uVW5oYW5kbGVkRXJyb3IiLCJvblN0b3BwZWROb3RpZmljYXRpb24iLCJQcm9taXNlIiwidW5kZWZpbmVkIiwidXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZyIsInVzZURlcHJlY2F0ZWROZXh0Q29udGV4dCIsInRpbWVvdXRQcm92aWRlciIsInNldFRpbWVvdXQiLCJoYW5kbGVyIiwidGltZW91dCIsImFyZ3MiLCJfaSIsImRlbGVnYXRlIiwiYXBwbHkiLCJjbGVhclRpbWVvdXQiLCJoYW5kbGUiLCJyZXBvcnRVbmhhbmRsZWRFcnJvciIsIm5vb3AiLCJDT01QTEVURV9OT1RJRklDQVRJT04iLCJjcmVhdGVOb3RpZmljYXRpb24iLCJraW5kIiwiY29udGV4dCIsIlN1YnNjcmliZXIiLCJfc3VwZXIiLCJkZXN0aW5hdGlvbiIsIl90aGlzIiwiaXNTdG9wcGVkIiwiRU1QVFlfT0JTRVJWRVIiLCJjb21wbGV0ZSIsIlNhZmVTdWJzY3JpYmVyIiwiaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbiIsIm5leHROb3RpZmljYXRpb24iLCJfbmV4dCIsIl9lcnJvciIsIl9jb21wbGV0ZSIsIl9iaW5kIiwiRnVuY3Rpb24iLCJiaW5kIiwiZm4iLCJDb25zdW1lck9ic2VydmVyIiwicGFydGlhbE9ic2VydmVyIiwiaGFuZGxlVW5oYW5kbGVkRXJyb3IiLCJvYnNlcnZlck9yTmV4dCIsImNvbnRleHRfMSIsImVycm9yVGhyb3duIiwibm90aWZpY2F0aW9uIiwic3Vic2NyaWJlciIsIm9ic2VydmFibGUiLCJpZGVudGl0eSIsIk9ic2VydmFibGUiLCJzdWJzY3JpYmUiLCJfc3Vic2NyaWJlIiwibGlmdCIsIm9wZXJhdG9yIiwic291cmNlIiwiaXNPYnNlcnZlciIsImNiIiwiaXNSb290IiwiZXJyb3JDb250ZXh0IiwiX3RyeVN1YnNjcmliZSIsInNpbmsiLCJmb3JFYWNoIiwicHJvbWlzZUN0b3IiLCJnZXRQcm9taXNlQ3RvciIsInJlc29sdmUiLCJyZWplY3QiLCJwaXBlIiwib3BlcmF0aW9ucyIsImZucyIsImlucHV0IiwicmVkdWNlIiwicHJldiIsInRvUHJvbWlzZSIsImlzSW50ZXJvcE9ic2VydmFibGUiLCJpc0FzeW5jSXRlcmFibGUiLCJvYmoiLCJhc3luY0l0ZXJhdG9yIiwiY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IiLCJpc0l0ZXJhYmxlIiwicmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvciIsInJlYWRhYmxlU3RyZWFtIiwiX2FyZ3VtZW50cyIsImdlbmVyYXRvciIsInEiLCJhIiwicmVzdW1lIiwiZnVsZmlsbCIsInNldHRsZSIsInNoaWZ0IiwiX19hc3luY0dlbmVyYXRvciIsInJlYWRlciIsImdldFJlYWRlciIsInJlYWQiLCJyZWxlYXNlTG9jayIsImlzUmVhZGFibGVTdHJlYW1MaWtlIiwiaW5uZXJGcm9tIiwib2JzIiwiYXJyYXkiLCJwcm9taXNlIiwiZnJvbUFzeW5jSXRlcmFibGUiLCJpdGVyYWJsZSIsIml0ZXJhYmxlXzEiLCJpdGVyYWJsZV8xXzEiLCJhc3luY0l0ZXJhYmxlIiwiYXN5bmNJdGVyYWJsZV8xIiwiYXN5bmNJdGVyYWJsZV8xXzEiLCJQIiwiX19hc3luY1ZhbHVlcyIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwicmVzdWx0IiwicHJvY2VzcyIsImNhdGNoIiwib3BlcmF0ZSIsImluaXQiLCJoYXNMaWZ0IiwibGlmdGVkU291cmNlIiwiY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIiwib25OZXh0Iiwib25Db21wbGV0ZSIsIm9uRXJyb3IiLCJvbkZpbmFsaXplIiwiT3BlcmF0b3JTdWJzY3JpYmVyIiwic2hvdWxkVW5zdWJzY3JpYmUiLCJjbG9zZWRfMSIsInByb2plY3QiLCJleGVjdXRlU2NoZWR1bGUiLCJwYXJlbnRTdWJzY3JpcHRpb24iLCJzY2hlZHVsZXIiLCJ3b3JrIiwiZGVsYXkiLCJyZXBlYXQiLCJzY2hlZHVsZVN1YnNjcmlwdGlvbiIsInNjaGVkdWxlIiwibWVyZ2VNYXAiLCJyZXN1bHRTZWxlY3RvciIsImNvbmN1cnJlbnQiLCJJbmZpbml0eSIsImlpIiwib25CZWZvcmVOZXh0IiwiZXhwYW5kIiwiaW5uZXJTdWJTY2hlZHVsZXIiLCJhZGRpdGlvbmFsRmluYWxpemVyIiwiYnVmZmVyIiwiYWN0aXZlIiwiaXNDb21wbGV0ZSIsImNoZWNrQ29tcGxldGUiLCJvdXRlck5leHQiLCJkb0lubmVyU3ViIiwiaW5uZXJDb21wbGV0ZSIsImlubmVyVmFsdWUiLCJidWZmZXJlZFZhbHVlIiwibWVyZ2VJbnRlcm5hbHMiLCJtYXBPbmVPck1hbnlBcmdzIiwiY2FsbE9yQXBwbHkiLCJub2RlRXZlbnRFbWl0dGVyTWV0aG9kcyIsImV2ZW50VGFyZ2V0TWV0aG9kcyIsImpxdWVyeU1ldGhvZHMiLCJmcm9tRXZlbnQiLCJ0YXJnZXQiLCJldmVudE5hbWUiLCJvcHRpb25zIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpc0V2ZW50VGFyZ2V0IiwibWV0aG9kTmFtZSIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJpc05vZGVTdHlsZUV2ZW50RW1pdHRlciIsInRvQ29tbW9uSGFuZGxlclJlZ2lzdHJ5Iiwib24iLCJvZmYiLCJpc0pRdWVyeVN0eWxlRXZlbnRFbWl0dGVyIiwic3ViVGFyZ2V0IiwiQWN0aW9uIiwic3RhdGUiLCJpbnRlcnZhbFByb3ZpZGVyIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiQXN5bmNBY3Rpb24iLCJwZW5kaW5nIiwiaWQiLCJyZWN5Y2xlQXN5bmNJZCIsInJlcXVlc3RBc3luY0lkIiwiX2lkIiwiZmx1c2giLCJfc2NoZWR1bGVyIiwiZXhlY3V0ZSIsIl9leGVjdXRlIiwiX2RlbGF5IiwiZXJyb3JWYWx1ZSIsImVycm9yZWQiLCJhY3Rpb25zIiwiZGF0ZVRpbWVzdGFtcFByb3ZpZGVyIiwibm93IiwiRGF0ZSIsIlNjaGVkdWxlciIsInNjaGVkdWxlckFjdGlvbkN0b3IiLCJhc3luY1NjaGVkdWxlciIsIkFzeW5jU2NoZWR1bGVyIiwiU2NoZWR1bGVyQWN0aW9uIiwiX2FjdGl2ZSIsImFjdGlvbiIsIm9ic2VydmVPbiIsInN1YnNjcmliZU9uIiwic2NoZWR1bGVBc3luY0l0ZXJhYmxlIiwic2NoZWR1bGVPYnNlcnZhYmxlIiwic2NoZWR1bGVBcnJheSIsInNjaGVkdWxlUHJvbWlzZSIsInNjaGVkdWxlSXRlcmFibGUiLCJzY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZSIsInNjaGVkdWxlZCIsImdldFByb3RvdHlwZU9mIiwib2JqZWN0UHJvdG8iLCJnZXRLZXlzIiwia2V5cyIsImlzU2NoZWR1bGVyIiwibGFzdCIsInBvcFNjaGVkdWxlciIsImNvbWJpbmVMYXRlc3QiLCJwb3BSZXN1bHRTZWxlY3RvciIsImZpcnN0XzEiLCJrZXkiLCJhcmdzQXJnQXJyYXlPck9iamVjdCIsIm9ic2VydmFibGVzIiwidmFsdWVUcmFuc2Zvcm0iLCJtYXliZVNjaGVkdWxlIiwidmFsdWVzIiwicmVtYWluaW5nRmlyc3RWYWx1ZXMiLCJfbG9vcF8xIiwiaGFzRmlyc3RWYWx1ZSIsImNvbWJpbmVMYXRlc3RJbml0IiwiY3JlYXRlT2JqZWN0Iiwic3Vic2NyaXB0aW9uIiwiZW52aXJvbm1lbnRzIiwidGFrZSIsImNvdW50Iiwic2VlbiIsImRlbGF5V2hlbiIsImRlbGF5RHVyYXRpb25TZWxlY3RvciIsInN1YnNjcmlwdGlvbkRlbGF5IiwibWFwVG8iLCJDb21wZXRpdGlvbiIsIm9wcG9uZW50c09icyIsIm15VGVhbSIsIm9wcG9uZW50cyIsInBsYXlHYW1lcyIsIm9wcCIsIm9mIiwiZHVlIiwiZHVyYXRpb24iLCJkdWVUaW1lIiwiaW50ZXJ2YWxPclNjaGVkdWxlciIsImludGVydmFsRHVyYXRpb24iLCJpc05hTiIsInRpbWVyIiwiZGF0YSIsImRldGVybWluZVdpbm5lciIsImdldFRlYW1Db2VmIiwic3RhcnRDb21wZXRpdGlvbiIsIm9wcHMiLCJteVRlYW1OYW1lIiwibXlUZWFtQ29lZmYiLCJvcHBvbmVudCIsIm15U2NvcmUiLCJvcHBvbmVudFNjb3JlIiwib3V0Y29tZSIsImNvZWZmaWNpZW50IiwiTWF0aCIsInJvdW5kIiwicmFuZG9tIiwib3Bwb25lbnROYW1lIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwicmVzdWx0TGFiZWwiLCJjcmVhdGVFbGVtZW50Iiwic3R5bGUiLCJjb2xvciIsImRyYXdSZXN1bHRzIiwiVGVhbSIsImRyaXZlcnMiLCJjb2VmIiwidGltZSIsInBsYXllcklucHV0T2JzIiwiaW5wdXRGaWVsZCIsImRyaXZlckNvbnRhaW5lciIsImRyaXZlclBvc2l0aW9uIiwiYWN0aXZlVGFzayIsImxhc3RWYWx1ZSIsImxhc3RUaW1lIiwiZW1pdCIsImVtaXRXaGVuSWRsZSIsInRhcmdldFRpbWUiLCJldiIsInByZWRpY2F0ZSIsImRyaXZlck5hbWUiLCJmZXRjaCIsInJlcyIsIm9rIiwianNvbiIsImdldFBsYXllciIsImlubmVyU3Vic2NyaWJlciIsImlucHV0RmllbGRzIiwidGVhbVZpZXdDb250YWluZXIiLCJkcml2ZXJEZXRhaWxzIiwiZHJpdmVyTmFtZUxhYmVscyIsImRyaXZlclN0YXRzTGFiZWxzIiwicG9zaXRpb25EaXZzIiwiY2xhc3NOYW1lIiwiY2xhc3NOYW1lcyIsImNyZWF0ZUVsZW1lbnRzIiwiaW5wdXRzIiwidGVhbUNvbnRhaW5lciIsImlucHV0c0NvbnRhaW5lciIsImxhYmVsVmFsdWVzIiwiaW5kIiwiaW5wdXREaXYiLCJsYWJlbGEiLCJkcmF3SW5wdXRzIiwiZHJhd0JvZHlDb250YWluZXIiLCJkcml2ZXIxIiwiZHJpdmVyMiIsImRyaXZlcjMiLCJkcjEiLCJkcjIiLCJkcjMiLCJ0ZWFtIiwiY29uc29sZSIsImxvZyIsIm1ha2VUZWFtT2JzIiwicmVzdWx0c0RpdiIsImNsYXNzTGlzdCJdLCJzb3VyY2VSb290IjoiIn0=